<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>UnityVR开发</title>
      <link href="/my_blog/2025/02/13/UnityVR%E5%BC%80%E5%8F%91/"/>
      <url>/my_blog/2025/02/13/UnityVR%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前景提要（免责声明）"><a href="#前景提要（免责声明）" class="headerlink" title="前景提要（免责声明）"></a>前景提要（免责声明）</h1><ul><li>本帖旨在记录自己开发制作过程中使用的技术，防止后续遗忘，不保证完全正确但我实践下来是可行的（）</li><li>使用的是unity官方的VR系统进行基础开发，计划后续接入HTCVive设备，VR设备不同不保证能够完全兼容</li><li>使用unity版本为2022.3.53f1c1，为LFS长期支持版本，经测试2023版本也可以使用，UI布局相同，其余未知</li></ul><h1 id="初始准备部分"><a href="#初始准备部分" class="headerlink" title="初始准备部分"></a>初始准备部分</h1><blockquote><p>这部分包括新建项目和相关包导入</p></blockquote><ol><li>新建unity3D空项目，使用的是最普通的3d项目</li><li>左上角点击Edit→Project Settings→XR Plug-in Management→Install XR Plugin Management，安装需要的包</li><li>同页面勾选Open XR，等待安装相关包（会提示需要重启项目，点确定就行）</li><li>继续打开同页面，勾选Open XR（会有警告），然后点击子页面Project Validation，点击Fix All。接着点击子页面中的OpenXR页面，在Enabled Interaction Profiles中添加你需要支持的VR设备（我选择无脑全部加入），到这一步警告应该就消失了</li><li>打开Package Manager（左上角Windows→Package Manager）,在Unity Registry中搜索XR Interaction Toolkit这个包，点击Install</li><li>安装后，同页面点击Samples，找到Starter Assets，点击Import</li><li>接下来导入玩家头显和手柄。Hierarchy框中（就是左侧放所有游戏物体的部分）点击鼠标右键→XR→XR Origin(VR)，然后删除默认摄像机（Main Camera游戏物体）（因为头显自带一个摄像机）</li><li>点击XR Origin(VR)，找到子物体Left Controller，在它的XR Controller组件的右上角，有一个按钮（如图），点击后选择XRI Default Left Controller；找到子物体Right Controller，在它的XR Controller组件的右上角，有一个按钮（如图），点击后选择XRI Default Right Controller；</li></ol><p><img src="attachment:7c2a578a-2a9d-4c69-8d7b-96f1a1d3e60b:image.png" alt="image.png"></p><h2 id="模拟设备输入"><a href="#模拟设备输入" class="headerlink" title="模拟设备输入"></a>模拟设备输入</h2><p>开发过程中可能没有VR设备，就需要用键鼠模拟手柄和头显的输入输出。具体操作如下：</p><ol><li>打开Package Manager（左上角Windows→Package Manager）,搜索XR Interaction Toolkit，点击Samples，找到XR Device Simulator，点击Import</li><li>左上角点击Edit→Project Settings→XR Plug-in Management→XR Interaction Toolkit，勾选Use XR  Device Simulator In Scenes（后续不想要使用模拟的话把这个勾选去掉就行）</li></ol><p>到这一步就可以点击运行了，如果能够用键鼠模拟手柄的输入和移动手柄、头显，那么基础构建完成！（提示：点击Tab在头显、左手柄、右手柄之间切换）</p><h1 id="UI交互"><a href="#UI交互" class="headerlink" title="UI交互"></a>UI交互</h1><p>使用的方案是射线交互，实现用户登录、关卡选择和页面跳转（未来可能考虑眼球追踪做视线交互）</p><h2 id="按钮交互（射线）"><a href="#按钮交互（射线）" class="headerlink" title="按钮交互（射线）"></a>按钮交互（射线）</h2><ol><li>Hierarchy中鼠标右键→UI→Canvas，新建一个Canvas（同时会新建一个EventSystem），点击EventSystem，删除带着的Standalone Input Module（右上角三个点→Remove Component），然后添加组件XR UI Input Module（如果为了防止后续鼠标也可以和ui组件交互，可以把Input Devices中的Enable Mouse Input勾选去掉）</li><li>点击Canvas，在带着的Canvas组件下找到Render Mode，修改为World Space（默认是Screen Space），把EventCamera设置为XR Origin(XR Rig)的Mian Camera（把对应物体拖到这个字段里面）。在Transform组件中把位置设置为（0，0，0），缩放（Scale）设置为0.01（三个轴同步）。在Canvas上添加 <code>Tracked Device Graphic Raycaster</code> 组件</li><li>右键Canvas→UI→Image，调整位置和大小到你可以在Game界面中看到它（Image也可以不创建，这里是为了方便定位，作为后续放置ui组件的“底板”）</li><li>右键Image→UI→Button - TextMeshPro，新建一个button（没有导入TMP包的话会提示需要导入，按提示点就行），自行调整大小和位置</li></ol><hr><p>可以选择给按钮绑定交互事件来测试</p><ol><li>新建C#脚本（这里举个例子）</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span>()</span><br>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;按钮被点击&quot;</span>);<span class="hljs-comment">//在控制台输出日志信息</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>把该脚本拖拽到按钮上（理论上可以挂载到任意一个游戏物体，这里演示就放button上）</li><li>点击Button，找到Button组件，在On Click（）中新建一个</li></ol><p><img src="attachment:0d10f1fa-78c1-4024-92e4-09d174dd8500:image.png" alt="image.png"></p><ol><li>拖入脚本</li></ol><p><img src="attachment:1801ef3d-091f-4a88-ade0-3feee474c697:image.png" alt="image.png"></p><ol><li>选择刚刚写好的事件</li></ol><p><img src="attachment:39409e96-c5b7-4223-a5b4-93363b448ddb:image.png" alt="image.png"></p><p>现在再运行项目，点击按钮就可以看到控制台输出”按钮被点击”</p><h2 id="场景跳转"><a href="#场景跳转" class="headerlink" title="场景跳转"></a>场景跳转</h2><h3 id="同步加载"><a href="#同步加载" class="headerlink" title="同步加载"></a>同步加载</h3><p>适合小场景，代码简单，可能卡顿</p><p>如果是要实现点击按钮跳转场景，按前面部分新建好按钮，</p><ol><li><p>左上角File→Build Settings，点击Add Open Scene，对于切换前后的两个场景都要做这个操作，把场景放入Scene In Build</p></li><li><p>记住场景的 <code>Index</code> 或 <code>名称</code></p></li><li><p>编写脚本，使用 <code>SceneManager.LoadScene</code> 进行场景切换</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.SceneManagement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SceneLoader</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadScene</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> sceneName</span>)</span><br>    &#123;<br>        SceneManager.LoadScene(sceneName); <span class="hljs-comment">// 通过场景名字加载</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadScene</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> sceneIndex</span>)</span><br>    &#123;<br>        SceneManager.LoadScene(sceneIndex); <span class="hljs-comment">// 通过场景索引加载</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将此脚本挂载到前面建好的button上，然后在 <code>Button</code> 的 <code>OnClick()</code> 事件中，调用 <code>LoadScene()</code> ，填写要跳转的场景名&#x2F;索引即可</p></li></ol><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><p>场景过大放卡顿用</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> UnityEngine.SceneManagement;<br><span class="hljs-keyword">using</span> System.Collections;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AsyncSceneLoader</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadSceneAsync</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> sceneName</span>)</span><br>    &#123;<br>        StartCoroutine(LoadSceneCoroutine(sceneName));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> IEnumerator <span class="hljs-title">LoadSceneCoroutine</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> sceneName</span>)</span><br>    &#123;<br>        AsyncOperation asyncLoad = SceneManager.LoadSceneAsync(sceneName);<br>        asyncLoad.allowSceneActivation = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 先不自动进入新场景</span><br><br>        <span class="hljs-comment">// 可以在这里添加一个加载进度条</span><br>        <span class="hljs-keyword">while</span> (asyncLoad.progress &lt; <span class="hljs-number">0.9f</span>)<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;加载进度: &quot;</span> + asyncLoad.progress);<br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 加载完成后，手动激活场景</span><br>        asyncLoad.allowSceneActivation = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="文本输入"><a href="#文本输入" class="headerlink" title="文本输入"></a>文本输入</h2><p>使用虚拟键盘实现输入，虚拟键盘来自<a href="https://gitcode.com/open-source-toolkit/1dc40">https://gitcode.com/open-source-toolkit/1dc40</a></p><ol><li><p>导入虚拟键盘</p><p> 由于本人不用GitCode，懒得配置令牌，选择下载压缩包再解压导入（），有配置过令牌的可以直接在untiy的Package Manager中用gitURL导入包。导入整个文件夹，只需要保留UIKeyboard&#x2F;UIKeyboard.unitypackage即可，其余删除。双击UIKeyboard.unitypackage，去掉TextMeshPro（前面导入过了），（示例场景看你需求，要不要都可以），然后点Import</p></li><li><p>把导入的KeyBoard.Prefab放进场景中（放在Canvas下面，作为Canvas的子物体），调整缩放和位置让玩家能够看见交互得到</p></li><li><p>这个键盘的输入存储在它的Keyboard Controller组件的公共字段Typed String中，可以通过以下代码获取</p></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> KeyboardController Keyborad;<span class="hljs-comment">//把Keyboard物体拖入这个字段</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getString</span>()</span><br>&#123;<br><span class="hljs-built_in">string</span> text=KeyBoard.TypedString;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>放置输入框</p><p> 右键Image→UI→Input Field - TextMeshPro，调整位置，编写和挂载脚本监听点击事件和实时替换输入框中的文本（比较粗暴的方式）</p><p> （下放我用的代码，我有两个输入框，另加了输入框高亮）</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">VRKeyboardManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> KeyboardController keyboardController;  <span class="hljs-comment">// 虚拟键盘控制器</span><br>    <span class="hljs-keyword">public</span> TMP_InputField tmpInputField1;  <span class="hljs-comment">// 第一个 TMP 输入框</span><br>    <span class="hljs-keyword">public</span> TMP_InputField tmpInputField2;  <span class="hljs-comment">// 第二个 TMP 输入框</span><br><br>    <span class="hljs-keyword">private</span> TMP_InputField activeTMPInputField = <span class="hljs-literal">null</span>;  <span class="hljs-comment">// 记录当前选中的 TMP 输入框</span><br>    <span class="hljs-keyword">private</span> Color defaultBGColor = Color.white;  <span class="hljs-comment">// 默认背景颜色</span><br>    <span class="hljs-keyword">private</span> Color selectedBGColor = <span class="hljs-keyword">new</span> Color(<span class="hljs-number">149f</span> / <span class="hljs-number">255f</span>, <span class="hljs-number">203f</span> / <span class="hljs-number">255f</span>, <span class="hljs-number">211f</span> / <span class="hljs-number">255f</span>, <span class="hljs-number">1f</span>); <span class="hljs-comment">// 选中时的淡蓝色（RGBA）</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 监听 TMP_InputField 的选择事件</span><br>        tmpInputField1.onSelect.AddListener(<span class="hljs-built_in">delegate</span> &#123; SetActiveTMPInputField(tmpInputField1); &#125;);<br>        tmpInputField2.onSelect.AddListener(<span class="hljs-built_in">delegate</span> &#123; SetActiveTMPInputField(tmpInputField2); &#125;);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (activeTMPInputField != <span class="hljs-literal">null</span>)<br>        &#123;<br>            activeTMPInputField.text = keyboardController.typedString;  <span class="hljs-comment">// 让 TMP 输入框内容实时更新</span><br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 当用户选择某个输入框时，激活它，并改变文本颜色</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetActiveTMPInputField</span>(<span class="hljs-params">TMP_InputField tmpInputField</span>)</span><br>    &#123;<br>        <span class="hljs-comment">// 重置所有输入框的颜色</span><br>        ResetInputFieldColors();<br><br>        <span class="hljs-comment">// 设为当前选中的输入框</span><br>        activeTMPInputField = tmpInputField;<br>        keyboardController.typedString = tmpInputField.text; <span class="hljs-comment">// 让键盘的 typedString 同步输入框的内容</span><br><br>        <span class="hljs-comment">// 修改当前选中输入框的背景颜色</span><br>        Image inputFieldImage = activeTMPInputField.GetComponent&lt;Image&gt;();<br>        <span class="hljs-keyword">if</span> (inputFieldImage != <span class="hljs-literal">null</span>)<br>        &#123;<br>            inputFieldImage.color = selectedBGColor;  <span class="hljs-comment">// 选中时背景变蓝</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 重置所有输入框的背景颜色</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ResetInputFieldColors</span>()</span><br>    &#123;<br>        Image img1 = tmpInputField1.GetComponent&lt;Image&gt;();<br>        Image img2 = tmpInputField2.GetComponent&lt;Image&gt;();<br><br>        <span class="hljs-keyword">if</span> (img1 != <span class="hljs-literal">null</span>) img1.color = defaultBGColor; <span class="hljs-comment">// 还原默认白色</span><br>        <span class="hljs-keyword">if</span> (img2 != <span class="hljs-literal">null</span>) img2.color = defaultBGColor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>没有使用unity自带的版本控制工具有可能会报错，移除项目中的Version Control包即可</li><li>unity中的ui文字用的TMP，导入外部文字（.ttf格式等）的时候需要转换成支持的格式，右键字体文件→Create→TextMeshPro→Font Asset进行创建</li><li>如果是中文字体，记得点击生成的文字文件，勾选这个，否则会出现显示文字为方框的问题</li></ul><p><img src="attachment:d4a4cbbe-2cbd-41f9-9020-0284e6283a4a:image.png" alt="image.png"></p><ul><li>中文字体包可以到你电脑上的C:\Windows\Fonts中找你要的</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常处理</title>
      <link href="/my_blog/2025/01/12/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/my_blog/2025/01/12/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在编译时捕获错误，在运行时处理错误（丢出错误给能处理的部分）</p><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br></code></pre></td></tr></table></figure><p>所有标准异常都有两个构造函数</p><ul><li><p>默认构造函数 </p></li><li><p>使用字符串参数，以便在异常中放置相关信息</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;t=null&quot;</span>);<br></code></pre></td></tr></table></figure><p>你可以抛出任何类型的 **<code>Throwable</code>**，它是异常的根类</p><h2 id="try-catch-block"><a href="#try-catch-block" class="headerlink" title="try catch block"></a>try catch block</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span><br>&#123;<br>    <span class="hljs-comment">//.....throw...</span><br>&#125;<br><span class="hljs-keyword">catch</span>(Type1 id1)<br>&#123;<br>    <span class="hljs-comment">//处理异常类型是Type1的异常</span><br>&#125;<br><span class="hljs-keyword">catch</span>(Type2 id2)<br>&#123;<br>    <span class="hljs-comment">//处理异常类型是Type2的异常</span><br>&#125;<br></code></pre></td></tr></table></figure><p>有了异常处理功能，你就可以把所有东西都放在 try 代码块中，然后在一个地方捕获所有异常，更易于编写和阅读 ， 代码的目标与错误检查不会混淆</p><p>每个 catch 子句（异常处理程序）就像一个小方法，只接受一个特定类型的参数，如果出现异常，异常处理机制会寻找第一个参数符合异常类型的处理程序</p><h2 id="处理异常的两种模式"><a href="#处理异常的两种模式" class="headerlink" title="处理异常的两种模式"></a>处理异常的两种模式</h2><p>在异常处理理论中，有两种基本模式：终止和恢复 </p><p>Java 支持终止 </p><ul><li>错误非常严重，没有办法回到异常发生的地方</li></ul><p>另一种模式称为恢复 </p><ul><li>异常处理程序应采取措施纠正这种情况，然后重试故障方法，假定第二次成功</li></ul><p>从历史上看，使用支持假定异常处理的操作系统的程序员最终都会使用类似终止的代码，而跳过恢复。</p><h2 id="创建自己的异常类"><a href="#创建自己的异常类" class="headerlink" title="创建自己的异常类"></a>创建自己的异常类</h2><p>java提供的可能不够用。需要继承自已有的异常类</p><p>最简单的做法就是直接继承 <code>Exception</code> 或 <code>RuntimeException</code> 类，并且不需要显式提供构造函数，编译器会自动生成一个默认构造函数。</p><p><strong>类名</strong> 是异常最重要的部分，它有助于描述异常的性质，并决定如何进行处理。</p><h3 id="throw和throws"><a href="#throw和throws" class="headerlink" title="throw和throws"></a>throw和throws</h3><ol><li>throw:直接控制异常的抛出。一旦检测到异常情况，它就会生成并抛出异常。注意throw的时候会让当前方法直接终止</li><li>throws：声明方法可能抛出的异常类型，（在方法内部仍然用throw扔出异常，但是不用在方法内部处理），调用该方法的代码需要使用 <code>try-catch</code> 来捕获异常，或者继续使用 <code>throws</code> 将异常抛出给更上层的调用者。thorws后面可以有多个可能的异常类型</li></ol><blockquote><p>java鼓励在函数后面说明可能抛出的异常</p><p>注意！如果您的方法中的代码会导致异常，但您的方法却不处理它们 ，编译器会检测到这一点并告诉您 ， 要么处理异常，要么用异常规范指出可以从您的方法中抛出异常 </p><p>Java 从上到下强制执行异常规范，保证在编译时可以确保一定程度的异常正确性 </p><p>开发者可以声明抛出异常，但实际代码中不抛出，这样未来添加异常时无需修改方法签名。</p><p>在编译时进行检查和强制执行的异常称为检查异常</p></blockquote><h3 id="带string参数的构造函数"><a href="#带string参数的构造函数" class="headerlink" title="带string参数的构造函数"></a>带string参数的构造函数</h3><p>可以在捕获后输出这个参数，便于了解错误信息，可以为异常添加详细描述</p><h3 id="printStackTrace"><a href="#printStackTrace" class="headerlink" title="printStackTrace()"></a>printStackTrace()</h3><p>输出打印方法调用栈信息，帮助追踪异常发生的调用路径，便于调试。</p><p>举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自定义异常类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br>    <span class="hljs-comment">// 带 String 参数的构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message); <span class="hljs-comment">// 将错误信息传递给父类 Exception</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-comment">// 一个模拟方法，用于演示抛出异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> <span class="hljs-keyword">throws</span> MyException &#123;<br>        <span class="hljs-keyword">if</span> (number &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 抛出自定义异常，并传递详细错误信息</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyException</span>(<span class="hljs-string">&quot;数字不能是负数: &quot;</span> + number);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;数字正常: &quot;</span> + number);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            checkNumber(-<span class="hljs-number">5</span>); <span class="hljs-comment">// 调用方法，触发异常</span><br>        &#125; <span class="hljs-keyword">catch</span> (MyException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;捕获异常：&quot;</span> + e.getMessage()); <span class="hljs-comment">// 打印异常信息</span><br>            e.printStackTrace(); <span class="hljs-comment">// 打印调用栈信息</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">捕获异常：数字不能是负数: -<span class="hljs-number">5</span><br>MyException: 数字不能是负数: -<span class="hljs-number">5</span><br>    at Test.<span class="hljs-built_in">checkNumber</span>(Test.java:<span class="hljs-number">7</span>)<br>    at Test.<span class="hljs-built_in">main</span>(Test.java:<span class="hljs-number">13</span>)<br></code></pre></td></tr></table></figure><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>捕获基类异常类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">catch</span>(Exception e)<br>&#123;<br>    System.out.println(<span class="hljs-string">&quot;Caught&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这将捕获任何异常，因此请将其放在处理程序列表的最后，以避免抢先处理后面的异常处理程序</p><p>要获取异常的具体信息，可以调用异常的基本类型 Throwable 类的各种方法</p><table><thead><tr><th>功能分类</th><th>方法</th><th>功能说明</th></tr></thead><tbody><tr><td>获取异常消息</td><td><code>getMessage()</code></td><td>返回异常的详细消息。</td></tr><tr><td></td><td><code>getLocalizedMessage()</code></td><td>返回针对本地化调整后的异常消息。</td></tr><tr><td>获取异常简短描述</td><td><code>toString()</code></td><td>返回异常类型和详细消息的简短描述。</td></tr><tr><td>打印堆栈跟踪信息</td><td><code>printStackTrace()</code></td><td>打印异常和堆栈信息到标准错误流。</td></tr><tr><td></td><td><code>printStackTrace(PrintStream)</code></td><td>输出异常信息到指定 <code>PrintStream</code> 对象。</td></tr><tr><td></td><td><code>printStackTrace(PrintWriter)</code></td><td>输出异常信息到指定 <code>PrintWriter</code> 对象。</td></tr><tr><td>记录当前堆栈状态信息</td><td><code>fillInStackTrace()</code></td><td>重新记录当前线程的堆栈状态信息。</td></tr></tbody></table><p>这些方法提供的信息量依次增加–每一种方法实际上都是前一种方法的超集</p><h2 id="再次抛出异常"><a href="#再次抛出异常" class="headerlink" title="再次抛出异常"></a>再次抛出异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">catch</span>(Exception e)<br>&#123;<br>    System.out.println(<span class="hljs-string">&quot;   &quot;</span>)<br><span class="hljs-keyword">throw</span> e;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新抛出异常会使异常转到下一级上下文中的异常处理程序，同一 try 块的任何其他 catch 子句仍会被忽略</p><p>printStackTrace( ) 将输出异常的起源，而不是重新抛出异常的地方 </p><p>fillInStackTrace( ) 异常对象会<strong>重新记录当前线程的堆栈信息</strong>，替换掉原始的堆栈跟踪信息。</p><h2 id="Throwable类"><a href="#Throwable类" class="headerlink" title="Throwable类"></a>Throwable类</h2><p>Java 类 Throwable 描述了任何可作为异常抛出的内容</p><p>Throwable 对象一般有两种类型</p><ul><li>Error 代表编译时错误和系统错误</li><li>Exception 是基本类型，可从任何标准 Java 库类方法以及您的方法和运行时意外事件中抛出</li></ul><h2 id="RuntimeException"><a href="#RuntimeException" class="headerlink" title="RuntimeException"></a>RuntimeException</h2><p>RuntimeException 及其子类总是由 Java 自动抛出，您不需要将其包含在异常说明中</p><p>代表编译错误</p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>放在 try-catch 代码块最后，无论是否抛出异常，都需要执行 </p><p>虽然 Java 不允许异常抛出后回到异常点继续执行（即异常中断了当前的执行流程），但 <strong><code>finally</code></strong> 块提供了一个方法，保证在异常发生后进行必要的收尾工作，确保程序状态的稳定性和资源的正确释放。</p><p>有可能导致异常没有被捕获（比如说</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LostExceptionExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            throwException(); <span class="hljs-comment">// 调用方法抛出异常</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;捕获异常：&quot;</span> + e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwException</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;原始异常&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;finally 中的异常&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>输出结果：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">捕获异常：java.lang.<span class="hljs-built_in">Exception</span>: <span class="hljs-keyword">finally</span> 中的异常<br></code></pre></td></tr></table></figure><ul><li>原始异常 <strong><code>RuntimeException(&quot;原始异常&quot;)</code></strong> 直接被 <strong><code>Exception(&quot;finally 中的异常&quot;)</code></strong> 覆盖。</li><li><code>finally</code> 块的异常会<strong>掩盖原始异常</strong>，导致原始异常信息丢失。</li></ul><h2 id="在构造函数中抛出异常"><a href="#在构造函数中抛出异常" class="headerlink" title="在构造函数中抛出异常"></a>在构造函数中抛出异常</h2><p>可能会导致清理不完全，此时finally也不是一个解决方案，比如说在finally中调用某个对象的某个函数进行清理，但是此时这个对象还没有创建，就可能导致一些清理无法完成</p><p>应当使用嵌套try-catch，确保资源能够正常释放</p><p><strong>嵌套 <code>try</code> 块</strong>：每个资源分配的代码段被单独放在一个 <code>try</code> 块中。</p><p><strong><code>finally</code> 块</strong>：在每个 <code>try</code> 块中，<code>finally</code> 确保资源被正确释放（如果资源成功分配）。</p><p><strong>异常安全</strong>：如果某个资源的构造函数抛出异常，<code>finally</code> 中的清理代码也不会出错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourceA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResourceA</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ResourceA 分配资源&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123; <span class="hljs-comment">// 模拟错误条件</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;ResourceA 构造函数中发生异常&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanUp</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ResourceA 释放资源&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourceB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResourceB</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ResourceB 分配资源&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanUp</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ResourceB 释放资源&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SafeConstructionExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ResourceA</span> <span class="hljs-variable">resourceA</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResourceB</span> <span class="hljs-variable">resourceB</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                resourceA = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceA</span>(); <span class="hljs-comment">// 尝试创建 ResourceA</span><br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> (resourceA != <span class="hljs-literal">null</span>) &#123;<br>                    resourceA.cleanUp(); <span class="hljs-comment">// 如果分配成功，进行清理</span><br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                resourceB = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceB</span>(); <span class="hljs-comment">// 尝试创建 ResourceB</span><br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> (resourceB != <span class="hljs-literal">null</span>) &#123;<br>                    resourceB.cleanUp(); <span class="hljs-comment">// 如果分配成功，进行清理</span><br>                &#125;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;捕获异常：&quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常匹配"><a href="#异常匹配" class="headerlink" title="异常匹配"></a>异常匹配</h2><p>当异常抛出时，异常处理系统会按编写顺序查找 “最近 “的处理程序</p><p>当找到匹配时，异常即被视为已处理，不再继续查找</p><p>派生类对象将匹配基类的处理程序</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发Concurrency</title>
      <link href="/my_blog/2025/01/12/%E7%BA%BF%E7%A8%8B/"/>
      <url>/my_blog/2025/01/12/%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="并发Concurrency"><a href="#并发Concurrency" class="headerlink" title="并发Concurrency"></a>并发Concurrency</h1><h2 id="为什么要多线程"><a href="#为什么要多线程" class="headerlink" title="为什么要多线程"></a>为什么要多线程</h2><p>为了1. 提高速度 2. 设计管理需要</p><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>一个进程单独占有一部分内存，一个进程中可以有多个线程，cpu轮换进行执行</p><p>线程是程序执行的最小单位</p><h2 id="Runnable类"><a href="#Runnable类" class="headerlink" title="Runnable类"></a>Runnable类</h2><p>在java中定义一个线程的任务的方式</p><p>要创建一个线程执行的任务，只需要实现 <code>Runnable</code> 接口，并在 <code>run()</code> 方法中编写你希望线程执行的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 线程执行的任务内容</span><br>        System.out.println(<span class="hljs-string">&quot;任务执行中...&quot;</span>);<br>        Thread.<span class="hljs-keyword">yield</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyTask</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>();  <span class="hljs-comment">// 创建任务</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task);  <span class="hljs-comment">// 将任务传递给线程</span><br>        thread.start();  <span class="hljs-comment">// 启动线程，执行任务</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以使用匿名内部类来写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">// 线程执行的任务内容</span><br>                System.out.println(<span class="hljs-string">&quot;任务执行中...&quot;</span>);<br>                Thread.<span class="hljs-keyword">yield</span>();  <span class="hljs-comment">// 让出CPU执行权</span><br>            &#125;<br>        &#125;);<br>        thread.start();  <span class="hljs-comment">// 启动线程，执行任务</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong><code>Thread.yield()</code> 方法</strong></p><ul><li><strong><code>Thread.yield()</code> 方法</strong>：<code>yield()</code> 是 <code>Thread</code> 类中的一个静态方法，用于提示线程调度器当前线程愿意让出控制权，暂停执行，并允许其他同优先级的线程有机会执行。<strong>注意</strong>，调用 <code>yield()</code> 方法并不意味着线程会马上放弃 CPU，线程调度器有可能会继续让当前线程继续执行。<ul><li>在某些多线程任务中，线程需要周期性地让出控制权，以使得其他线程也能执行，从而避免一个线程长期占用 CPU，导致其他线程得不到执行的机会。</li><li><code>yield()</code> 方法通常用于优化线程的调度，提升多线程环境下的资源使用效率。</li></ul></li></ul><p><strong>设置线程的名字</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myRunnable, <span class="hljs-string">&quot;Thread 1&quot;</span>);<br></code></pre></td></tr></table></figure><p>后一个参数可选，为这个线程的名字，如果没有，就是java自己给一个默认的名字</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>用于管理多个线程</p><p>可以限制线程池中的线程数量，复用线程，避免资源浪费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FixedThreadPool</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Constructor argument is number of threads: 5</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            exec.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LiftOff</span>());<br>        &#125;<br>        <br>        exec.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意需要关闭线程池</p><p>线程池的类型如下：</p><ol><li>**<code>newFixedThreadPool(int nThreads)</code>**：固定大小的线程池，线程池的大小固定为 <code>nThreads</code> 个线程。如果没有传入线程数，则需要显式指定线程数。</li><li>**<code>newCachedThreadPool()</code>**：可缓存的线程池。如果没有传入参数，默认会创建一个无限大小的线程池。线程池会根据需要创建新的线程，当线程空闲超过 60 秒时会被回收。</li><li>**<code>newSingleThreadExecutor()</code>**：单线程化的线程池，只会创建一个线程来处理所有提交的任务。</li></ol><h2 id="callable"><a href="#callable" class="headerlink" title="callable"></a>callable</h2><blockquote><p>如果有返回值的要用这个，不能用前面那种</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskWithResult</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TaskWithResult</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;result of TaskWithResult &quot;</span> + id;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CallableDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br>        ArrayList&lt;Future&lt;String&gt;&gt; results = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Future&lt;String&gt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            results.add(exec.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskWithResult</span>(i)));<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (Future&lt;String&gt; fs : results) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// get() blocks until completion:</span><br>                System.out.println(fs.get());<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                System.out.println(e);<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>                System.out.println(e);<br>            &#125;<br>        &#125;<br><br>        exec.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这里启动线程需要用submit函数</p><p><code>submit()</code> 方法接收一个实现了 <code>Callable</code> 或 <code>Runnable</code> 接口的任务，并返回一个 <code>Future</code> 对象。后续使用get来获得实际返回值</p><h2 id="Sleep"><a href="#Sleep" class="headerlink" title="Sleep()"></a>Sleep()</h2><p>注意sleep函数是作用于当前线程的，无法指定一个线程休眠多久</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread.sleep(milliseconds);  <span class="hljs-comment">// 参数是时间，单位为毫秒</span><br>TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">100</span>);<span class="hljs-comment">//用这种方式可读性更好，更好区分时间</span><br>TimeUnit.SECONDS.sleep(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><h2 id="定义线程优先级"><a href="#定义线程优先级" class="headerlink" title="定义线程优先级"></a>定义线程优先级</h2><p>优先级高的执行频率更高，但是不会一直在执行它。java一共定义了10级优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">thread.setPriority(Thread.MAX_PRIORITY);  <span class="hljs-comment">// 设置线程优先级</span><br><span class="hljs-comment">//在run方法中</span><br>Thread.currentThread().setPriority(priority);<span class="hljs-comment">//可以设置线程的构造函数，传入要设置的优先级，然后在这里设置</span><br></code></pre></td></tr></table></figure><p>可以使用 <code>Thread.getPriority()</code> 方法来获取线程的当前优先级。</p><h2 id="后台进程"><a href="#后台进程" class="headerlink" title="后台进程"></a>后台进程</h2><p>当主进程结束的时候，后台进程就一定会结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置为后台线程</span><br>thread.setDaemon(<span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 启动线程</span><br>thread.start();<br></code></pre></td></tr></table></figure><h2 id="自定义线程工厂"><a href="#自定义线程工厂" class="headerlink" title="自定义线程工厂"></a>自定义线程工厂</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.mindview.util;<br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DaemonThreadFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ThreadFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>        t.setDaemon(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 设置为后台线程</span><br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DaemonFromFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">100</span>);<br>                System.out.println(Thread.currentThread() + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">this</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Interrupted&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DaemonDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DaemonThreadFactory</span>());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            exec.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DaemonFromFactory</span>());<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;All daemons started&quot;</span>);<br>        TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">500</span>); <span class="hljs-comment">// 运行一段时间</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="直接继承自Thread"><a href="#直接继承自Thread" class="headerlink" title="直接继承自Thread"></a>直接继承自Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">countdown</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">threadCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleThread</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Store the thread name</span><br>        <span class="hljs-built_in">super</span>(Integer.toString(++threadCount));<span class="hljs-comment">//调用父类构造函数设置线程的名字</span><br>        start();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;#&quot;</span> + getName() + <span class="hljs-string">&quot;(&quot;</span> + countdown + <span class="hljs-string">&quot;), &quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.print(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-keyword">if</span> (--countdown == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleThread</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意有三种设置线程名字的方式，除了上述代码中的一种，还有：</p><ol><li><strong>使用 <code>setName()</code> 方法</strong>：可以在线程创建后修改线程的名字。</li><li><strong>使用 <code>getName()</code> 方法</strong>：可以获取当前线程的名字。</li></ol><h2 id="线程之间的互动（join"><a href="#线程之间的互动（join" class="headerlink" title="线程之间的互动（join)"></a>线程之间的互动（join)</h2><p>当一个线程调用另一个线程的 <code>join()</code> 方法时，调用线程将暂停执行，直到被调用的线程执行完毕后，调用线程才会继续执行。</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 创建 Runnable 对象</span><br>    <span class="hljs-type">MyRunnable</span> <span class="hljs-variable">myRunnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br><br>    <span class="hljs-comment">// 创建 Thread 对象并传入 Runnable 实现类</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myRunnable, <span class="hljs-string">&quot;Thread 1&quot;</span>);<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myRunnable, <span class="hljs-string">&quot;Thread 2&quot;</span>);<br><br>    <span class="hljs-comment">// 启动线程</span><br>    thread1.start();<br>    thread2.start();<br><br>    <span class="hljs-comment">// 这里会等待join的线程执行完成后再继续执行主线程</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        thread1.join();<br>        thread2.join();<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    System.out.println(<span class="hljs-string">&quot;Main thread is finished.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可能的输出：</p><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mercury">Thread <span class="hljs-number">1</span> <span class="hljs-keyword">is</span> starting...<br>Thread <span class="hljs-number">2</span> <span class="hljs-keyword">is</span> starting...<br>Thread <span class="hljs-number">1</span> <span class="hljs-keyword">is</span> finished.<br>Thread <span class="hljs-number">2</span> <span class="hljs-keyword">is</span> finished.<br>Main thread <span class="hljs-keyword">is</span> finished.<br></code></pre></td></tr></table></figure><h2 id="资源共享问题"><a href="#资源共享问题" class="headerlink" title="资源共享问题"></a>资源共享问题</h2><p>不同线程访问相同的资源可能产生矛盾冲突</p><p><code>synchronized</code> 是 Java 中用于控制并发访问的关键字，它用于确保某个代码块或者方法在同一时刻只会被一个线程执行，从而避免多线程环境下出现资源竞争、数据不一致等问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">someMethod</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 同步代码块</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>synchronized</code> 还可以修饰代码块，这样只有在代码块中的部分区域会被同步控制。通过指定一个对象作为锁，可以选择性地同步某些操作，增加并发性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">someMethod</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (lockObject) &#123;<br>        <span class="hljs-comment">// 同步代码块</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以使用lock</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MutexEvenGenerator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IntGenerator</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">currentEvenValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            +++currentEvenValue;<br>            Thread.<span class="hljs-keyword">yield</span>(); <span class="hljs-comment">// Cause failure faster</span><br>            ++currentEvenValue;<br>            <span class="hljs-keyword">return</span> currentEvenValue;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        EvenChecker.test(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MutexEvenGenerator</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以使用<strong>Thread Local Storage（线程本地存储）</strong> </p><p>为每个线程提供独立的变量副本，以避免不同线程之间共享变量可能导致的冲突问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ThreadLocal&lt;Integer&gt; threadLocalVariable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>threadLocalVariable.set(<span class="hljs-number">100</span>); <span class="hljs-comment">// 当前线程设置变量值为 100</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> threadLocalVariable.get(); <span class="hljs-comment">// 当前线程获取变量值</span><br></code></pre></td></tr></table></figure><ul><li><strong>set()</strong> 方法：为当前线程设置变量值。</li><li><strong>get()</strong> 方法：获取当前线程的变量值。</li></ul><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><ol><li>新建（New）</li><li>可运行（Runnable）（使用start方法时候）</li><li>运行中（Running）（cpu正在处理）</li><li>阻塞&#x2F;等待（Blocked&#x2F;Waiting&#x2F;Timed Waiting）</li><li>终止（Terminated）<ul><li>可以使用cancel（）和interrupt（）方法中断一个线程</li></ul></li></ol><h2 id="线程之间合作"><a href="#线程之间合作" class="headerlink" title="线程之间合作"></a>线程之间合作</h2><h3 id="1-wait-的作用"><a href="#1-wait-的作用" class="headerlink" title="1. wait() 的作用"></a><strong>1. <code>wait()</code> 的作用</strong></h3><ul><li><strong>暂停任务</strong>：<code>wait()</code> 方法会暂停当前线程的执行，使线程进入<strong>等待状态</strong>（Waiting）必须等到另一个线程调用 <code>notify()</code> 或 <code>notifyAll()</code> 方法，才能被唤醒。</li><li><strong>释放锁</strong>：调用 <code>wait()</code> 时，线程会释放它持有的对象锁，以便其他线程能够访问该对象的同步代码块。</li></ul><hr><h3 id="2-区别"><a href="#2-区别" class="headerlink" title="2. 区别"></a><strong>2. 区别</strong></h3><ul><li><code>sleep()</code> 和 <code>yield()</code> 不释放锁：<ul><li><code>sleep()</code> 是线程进入<strong>休眠状态</strong>，暂停指定时间后恢复，但不会释放当前持有的锁。</li><li><code>yield()</code> 提示线程调度器让出 CPU 时间，但也不会释放锁。</li></ul></li><li><code>wait()</code> 释放锁：<ul><li>当线程调用 <code>wait()</code> 时，它会释放当前对象的锁，以便其他线程能够访问该对象。</li></ul></li></ul><hr><h3 id="4-wait-的两种形式"><a href="#4-wait-的两种形式" class="headerlink" title="4. wait() 的两种形式"></a><strong>4. <code>wait()</code> 的两种形式</strong></h3><ol><li><p><strong>无参数形式</strong>：</p><ul><li><code>wait()</code> 会让线程无限期地等待，直到收到 <code>notify()</code> 或 <code>notifyAll()</code> 通知。</li><li>使用场景：需要等待特定的条件满足。</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (lock) &#123;<br>    lock.wait(); <span class="hljs-comment">// 无限期等待</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>带超时参数的形式</strong>：</p><ul><li><code>wait(long timeout)</code> 会让线程等待指定的时间，超时后自动退出等待状态。</li><li>使用场景：希望线程在超时后继续执行，而不依赖通知。</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (lock) &#123;<br>    lock.wait(<span class="hljs-number">5000</span>); <span class="hljs-comment">// 最多等待 5 秒</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="5-示例代码：线程间的通信"><a href="#5-示例代码：线程间的通信" class="headerlink" title="5. 示例代码：线程间的通信"></a><strong>5. 示例代码：线程间的通信</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SharedResource</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">waitTask</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!flag) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; is waiting...&quot;</span>);<br>                wait(); <span class="hljs-comment">// 等待通知</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; is resumed!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyTask</span><span class="hljs-params">()</span> &#123;<br>        flag = <span class="hljs-literal">true</span>;<br>        notify(); <span class="hljs-comment">// 通知一个等待线程</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; sent notification.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WaitNotifyExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SharedResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SharedResource</span>();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(resource::waitTask, <span class="hljs-string">&quot;Thread-1&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(resource::notifyTask, <span class="hljs-string">&quot;Thread-2&quot;</span>);<br><br>        thread1.start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>); <span class="hljs-comment">// 确保 thread1 先进入等待状态</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        thread2.start(); <span class="hljs-comment">// 通知等待的线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a><strong>输出结果</strong>：</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">Thread-1 is waiting...<br>Thread-2 sent notification.<br>Thread-1 is resumed!<br></code></pre></td></tr></table></figure><hr><h3 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6. 注意事项"></a><strong>6. 注意事项</strong></h3><ol><li>**必须在同步块或同步方法中使用 <code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code>**：<br>如果在非同步代码中调用，会抛出 <code>IllegalMonitorStateException</code>。</li><li><strong>使用条件</strong>：<ul><li>调用 <code>wait()</code> 的线程必须持有对象的锁。</li><li><code>notify()</code> 或 <code>notifyAll()</code> 方法也必须在同步块中调用。</li></ul></li><li>**区别 <code>notify()</code> 和 <code>notifyAll()</code>**：<ul><li>**<code>notify()</code>**：唤醒一个等待线程（具体选择由 JVM 决定）。</li><li>**<code>notifyAll()</code>**：唤醒所有等待线程。</li></ul></li><li><strong>避免死锁</strong>：在使用 <code>wait()</code> 和 <code>notify()</code> 时，确保不会造成线程间的资源争用，否则可能导致死锁。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络传输</title>
      <link href="/my_blog/2025/01/12/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93/"/>
      <url>/my_blog/2025/01/12/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93/</url>
      
        <content type="html"><![CDATA[<h1 id="网络传输"><a href="#网络传输" class="headerlink" title="网络传输"></a>网络传输</h1><h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><p>在 Internet 上运行的计算机使用传输控制协议 (TCP) 或用户数据报协议 (UDP) 相互通信</p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>不可靠通信，可能有数据丢失，使用发送数据包</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> www.Twilight.UDP_study.demo2;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPServerDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;服务端启动！&quot;</span>);<br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">8080</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">64</span>];<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length);<br><br>            socket.receive(packet);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> packet.getLength();<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, length));<br><br>            <span class="hljs-comment">//获取IP</span><br>            System.out.println(<span class="hljs-string">&quot;发送者IP：&quot;</span> + packet.getAddress().getHostAddress());<br>            <span class="hljs-comment">//获取程序端口</span><br>            System.out.println(<span class="hljs-string">&quot;发送者端口：&quot;</span> + packet.getPort());<br>            System.out.println(<span class="hljs-string">&quot;-----------------&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>用户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> www.Twilight.UDP_study.demo2;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPClientDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;客户端启动！&quot;</span>);<br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入要发送的内容：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.next();<br>            <span class="hljs-keyword">if</span> (str.equals(<span class="hljs-string">&quot;exit&quot;</span>)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;客户端退出！&quot;</span>);<br>                socket.close();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-type">byte</span>[] bytes = str.getBytes();<br>            <span class="hljs-comment">//数据包参数：内容，包的大小，发送地址，端口号</span><br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length, java.net.InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">8080</span>);<br>            socket.send(packet);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以实现和多个的连接和收发，服务端只负责收包，不管是谁发来的</p><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h3><p>使用java.net.Socket类进行通信，底层默认是使用TCP协议进行通信</p><ul><li>服务端使用ServerSocket类</li><li>客户端使用Socket类</li></ul><p>基于管道进行通信（IO流）</p><p>三次握手连接（保证双方都是可收可发的），四次挥手断开连接（保证客户端能够完全处理完前一次数据，安全断开连接</p><p>如果客户端更快发消息，信息会暂存在管道中；如果是服务端更快，则会等待客户端的消息</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><h4 id="一发一收"><a href="#一发一收" class="headerlink" title="一发一收"></a>一发一收</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> www.Twilight.TCP_study.OneToOne;<br><br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPServerDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        System.out.println(<span class="hljs-string">&quot;服务端启动！&quot;</span>);<br>        ServerSocket ss=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br><br>        <span class="hljs-comment">//阻塞等待客户端的连接，一旦有连接会返回一个Socket对象</span><br>        Socket socket=ss.accept();<br>        <span class="hljs-comment">//获取输入流</span><br>        InputStream is=socket.getInputStream();<br>        <span class="hljs-comment">//包装成特殊数据输入流</span><br>        DataInputStream dis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>        <span class="hljs-type">int</span> i=dis.readInt();<br>        String str=dis.readUTF();<br>        System.out.println(<span class="hljs-string">&quot;客户端发送的数据是：&quot;</span>+i+<span class="hljs-string">&quot;,客户端发送的数据是：&quot;</span>+str);<br>        <span class="hljs-comment">//获取发送者的ip和端口</span><br>        System.out.println(<span class="hljs-string">&quot;发送者IP：&quot;</span>+socket.getInetAddress().getHostAddress());<br>        System.out.println(<span class="hljs-string">&quot;发送者端口：&quot;</span>+socket.getPort());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> www.Twilight.TCP_study.OneToOne;<br><br><span class="hljs-keyword">import</span> java.io.DataOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPClientDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        System.out.println(<span class="hljs-string">&quot;客户端启动！&quot;</span>);<br>        <span class="hljs-comment">//创建和服务端连接，输入服务端的ip和端口号（注意这里和UDP不同）</span><br>        Socket socket=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">9999</span>);<br><br>        <span class="hljs-comment">//从管道中获取一个字节输出流（可以再包装成别的流，但是两端需要匹配）</span><br>        OutputStream os=socket.getOutputStream();<br>        <span class="hljs-comment">//特殊数据流</span><br>        DataOutputStream dos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br>        dos.writeInt(<span class="hljs-number">1</span>);<span class="hljs-comment">//可以分段发送信息，区分发送的信息类型，所以推荐使用</span><br>        dos.writeUTF(<span class="hljs-string">&quot;你好！！！！&quot;</span>);<br><br>        socket.close();<span class="hljs-comment">//释放资源，关闭管道</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多发多收"><a href="#多发多收" class="headerlink" title="多发多收"></a>多发多收</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> www.Twilight.TCP_study.ManyToMany;<br><br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPServerDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        System.out.println(<span class="hljs-string">&quot;服务端启动！&quot;</span>);<br>        ServerSocket ss=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br><br>        <span class="hljs-comment">//阻塞等待客户端的连接，一旦有连接会返回一个Socket对象</span><br>        Socket socket=ss.accept();<br>        <span class="hljs-comment">//获取输入流</span><br>        InputStream is=socket.getInputStream();<br>        <span class="hljs-comment">//包装成特殊数据输入流</span><br>        DataInputStream dis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            String str=dis.readUTF();<br>            System.out.println(<span class="hljs-string">&quot;客户端发送的数据是：&quot;</span>+str);<br>            <span class="hljs-comment">//获取发送者的ip和端口</span><br>            System.out.println(<span class="hljs-string">&quot;发送者IP：&quot;</span>+socket.getInetAddress().getHostAddress());<br>            System.out.println(<span class="hljs-string">&quot;发送者端口：&quot;</span>+socket.getPort());<br>            System.out.println(<span class="hljs-string">&quot;-----------------&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> www.Twilight.TCP_study.ManyToMany;<br><br><span class="hljs-keyword">import</span> java.io.DataOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPClientDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;客户端启动！&quot;</span>);<br>        <span class="hljs-comment">//创建和服务端连接，输入服务端的ip和端口号（注意这里和UDP不同）</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9999</span>);<br><br>        <span class="hljs-comment">//从管道中获取一个字节输出流（可以再包装成别的流，但是两端需要匹配）</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">//特殊数据流</span><br>        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br>        Scanner sc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入要发送的内容：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sc.nextLine();<br>            <span class="hljs-keyword">if</span>(str.equals(<span class="hljs-string">&quot;exit&quot;</span>))<br>            &#123;<br>                System.out.println(<span class="hljs-string">&quot;客户端退出！&quot;</span>);<br>                dos.close();<span class="hljs-comment">//有这行，os会自动关的</span><br>                socket.close();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            dos.writeUTF(str);<br>            dos.flush();<span class="hljs-comment">//注意要刷新。不能关管道</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个没办法实现和多个用户进行互动，只有一个主线程</p><h4 id="和多个客户端连接通信"><a href="#和多个客户端连接通信" class="headerlink" title="和多个客户端连接通信"></a>和多个客户端连接通信</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> www.Twilight.TCP_study.ManyClient;<br><br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPServerDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;服务端启动！&quot;</span>);<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//阻塞等待客户端的连接，一旦有连接会返回一个Socket对象</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ss.accept();<br>            System.out.println(<span class="hljs-string">&quot;一个客户端上线了，IP：&quot;</span>+socket.getInetAddress().getHostAddress());<br>            <span class="hljs-comment">//把接收到的客户端给一个独立的子线程进行处理</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerThread</span>(socket)).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerThread</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(socket.getInputStream())) &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> dis.readUTF();<br>                System.out.println(<span class="hljs-string">&quot;客户端发送的数据是：&quot;</span> + str);<br>                <span class="hljs-comment">//获取发送者的ip和端口</span><br>                System.out.println(<span class="hljs-string">&quot;发送者IP：&quot;</span> + socket.getInetAddress().getHostAddress());<br>                System.out.println(<span class="hljs-string">&quot;发送者端口：&quot;</span> + socket.getPort());<br>                System.out.println(<span class="hljs-string">&quot;-----------------&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">//断开连接的时候会有一个异常</span><br>            System.out.println(<span class="hljs-string">&quot;客户端下线，IP：&quot;</span>+socket.getInetAddress().getHostAddress());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> www.Twilight.TCP_study.ManyClient;<br><br><span class="hljs-keyword">import</span> java.io.DataOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPClientDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;客户端启动！&quot;</span>);<br>        <span class="hljs-comment">//创建和服务端连接，输入服务端的ip和端口号（注意这里和UDP不同）</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">9999</span>);<br><br>        <span class="hljs-comment">//从管道中获取一个字节输出流（可以再包装成别的流，但是两端需要匹配）</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">//特殊数据流</span><br>        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br>        Scanner sc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入要发送的内容：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sc.nextLine();<br>            <span class="hljs-keyword">if</span>(str.equals(<span class="hljs-string">&quot;exit&quot;</span>))<br>            &#123;<br>                System.out.println(<span class="hljs-string">&quot;客户端退出！&quot;</span>);<br>                dos.close();<span class="hljs-comment">//有这行，os会自动关的</span><br>                socket.close();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            dos.writeUTF(str);<br>            dos.flush();<span class="hljs-comment">//注意要刷新。不能关管道</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关于BS架构"><a href="#关于BS架构" class="headerlink" title="关于BS架构"></a>关于BS架构</h3><p>也是TCP架构，原理是一样的</p><p>区别是客户端不用自己写，是浏览器，用户访问指定的ip的指定端口，（一个Socket），然后服务端返回一个网站数据给它即可</p><p>可以使用线程池优化，不需要频繁创建和销毁线程（返回网页数据是很短的任务）</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java自学</title>
      <link href="/my_blog/2025/01/12/java%E8%87%AA%E5%AD%A6/"/>
      <url>/my_blog/2025/01/12/java%E8%87%AA%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="java自学"><a href="#java自学" class="headerlink" title="java自学"></a>java自学</h1><p>以下内容来自黑马程序员的java课<a href="https://www.bilibili.com/video/BV1gb42177hm?p=25&vd_source=a503248b608b8da9614b6dd7eb24901d">Java基础-08-运算符-逻辑运算符_哔哩哔哩_bilibili</a></p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>空工程-&gt;模块-&gt;包-&gt;类，类里面放main和其他函数</p><p>包命名com.公司名字.技术名字，包新建到src中，有多个包的时候会自己创建文件夹</p><p>和cpp不同的是函数可以放在main后面，注意main的写法</p><p>注意bool在java中写作boolean</p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出有printf（），可以指定输出格式，还有println（），字符串格式输出，+号来连接各个部分</p><p>输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.twillight.scanner;<span class="hljs-comment">//idea已经设置了自动导包</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">input</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.导包(设置后自动导入）</span><br>        <span class="hljs-comment">//2.创建对象</span><br>        Scanner sc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">//3.获取用户输入</span><br>        System.out.println(<span class="hljs-string">&quot;请输入姓名：&quot;</span>);<br>        String userName=sc.next();<span class="hljs-comment">//让程序在这一行暂停，等到用户输入一个字符串，直到按回车键之后，再把字符串给变量</span><br>        System.out.println(<span class="hljs-string">&quot;请输入年龄：&quot;</span>);<br>        <span class="hljs-type">int</span> age=sc.nextInt();<br><br>        <span class="hljs-comment">//4.打印</span><br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span>+userName+<span class="hljs-string">&quot; 年龄：&quot;</span>+age);<br><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>范围小的转成大的会自动，如int a&#x3D;5；double b&#x3D;a;</p><p>如果是大转小需要自己强制转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> b=<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> a=(<span class="hljs-type">int</span>)b;<br></code></pre></td></tr></table></figure><h2 id="表达式的自动类型提升"><a href="#表达式的自动类型提升" class="headerlink" title="表达式的自动类型提升"></a>表达式的自动类型提升</h2><p>表达式中的小变量会自动转化成大变量计算，最后结果由范围最大的决定</p><p>bite、char、short在运算的时候会转成int使用，最算是比如char+char</p><h2 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h2><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(a/b);<span class="hljs-comment">//3</span><br>System.out.println((<span class="hljs-type">double</span>)a/b);<span class="hljs-comment">//3.3333333333333335</span><br>System.out.println(<span class="hljs-number">1.0</span>*a/b);<span class="hljs-comment">//3.3333333333333335</span><br></code></pre></td></tr></table></figure><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>（+号运算，能加就加，不能加作为连接符（char是作为数据存储，可以加））</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printOfAdd</span><span class="hljs-params">()</span><br> &#123;<br>     <span class="hljs-type">int</span> a=<span class="hljs-number">5</span>;<br>     System.out.println(a+<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">//102</span><br>     System.out.println(<span class="hljs-string">&#x27;a&#x27;</span>+a);<span class="hljs-comment">//102</span><br>     System.out.println(a+<span class="hljs-string">&quot;abc&quot;</span>);<span class="hljs-comment">//5abc</span><br>     System.out.println(a+<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-string">&quot;abc&quot;</span>);<span class="hljs-comment">//102abc</span><br>     System.out.println(a+<span class="hljs-string">&quot;abc&quot;</span>+<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">//5abca</span><br>     System.out.println(<span class="hljs-string">&#x27;a&#x27;</span>+a+<span class="hljs-string">&quot;abc&quot;</span>);<span class="hljs-comment">//102abc</span><br>     System.out.println(<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-string">&quot;abc&quot;</span>+a);<span class="hljs-comment">//aabc5</span><br>     System.out.println(<span class="hljs-string">&quot;abc&quot;</span>+<span class="hljs-string">&#x27;a&#x27;</span>+a);<span class="hljs-comment">//abca5</span><br>     System.out.println(<span class="hljs-string">&quot;abc&quot;</span>+a+<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">//abc5a</span><br> &#125;<br></code></pre></td></tr></table></figure><h3 id="扩展的赋值运算符"><a href="#扩展的赋值运算符" class="headerlink" title="扩展的赋值运算符"></a>扩展的赋值运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//扩展的赋值运算符隐含了强制类型转换</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printOfExtend</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">byte</span> a=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">byte</span> b=<span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//byte运算的时候会强制转化成int进行计算，所以不能直接赋值给byte类型的变量，需要强制转化</span><br>    <span class="hljs-type">byte</span> c=(<span class="hljs-type">byte</span>)(a+b);<br>    System.out.println(c);<br>    <span class="hljs-comment">//但也可以使用扩展的赋值运算符，省去自己强制转换</span><br>    a+=b;<br>    System.out.println(a);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//嵌套三元运算符</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> score)</span><br>&#123;<br>    System.out.println(score&gt;<span class="hljs-number">90</span>?<span class="hljs-string">&quot;优秀&quot;</span>:score&gt;<span class="hljs-number">60</span>?<span class="hljs-string">&quot;良好&quot;</span>:<span class="hljs-string">&quot;及格&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//返回三个数字中的最大数字（使用三元运算符）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span><br>&#123;<br>    <span class="hljs-type">int</span> max=a&gt;b?a:b;<br>    <span class="hljs-keyword">return</span> max&gt;c?max:c;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑异或^</p><p>短路与  &amp;&amp;   如果前面是假，后面不执行</p><p>短路或  ||  如果前面是真，后面不执行</p><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>比较值来判断执行哪一个分支</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> score)</span><br>&#123;<br>    <span class="hljs-keyword">switch</span>(score)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">90</span>:<br>            System.out.println(<span class="hljs-string">&quot;优秀&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">80</span>:<br>            System.out.println(<span class="hljs-string">&quot;良好&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">70</span>:<br>            System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<span class="hljs-comment">//这个break可以不写</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>switch后面表达式类型只能是bite、short、int、char，JDK5开始支持枚举，LDK7开始支持string，不支持double、float、long</p></li><li><p>case给出的值不允许重复，且只能是字面量，不能是变量</p></li><li><p>不要忘记写break，否则会有穿透现象</p></li><li><p>穿透性：如果没有break，碰到一个判断成功的，会一路向下走，直到遇到break</p><p>优点是重复的代码可以使用穿透性合并</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print2</span><span class="hljs-params">(<span class="hljs-type">int</span> score)</span><br>&#123;<br>    <span class="hljs-keyword">switch</span>(score)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">90</span>:<br>            System.out.println(<span class="hljs-string">&quot;优秀&quot;</span>);<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">80</span>:<br>            System.out.println(<span class="hljs-string">&quot;良好&quot;</span>);<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">70</span>:<br>            System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>        <span class="hljs-keyword">default</span>:<br>            System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//输入80，</span><br>    <span class="hljs-comment">//输出：</span><br>    <span class="hljs-comment">//良好</span><br>    <span class="hljs-comment">//及格</span><br><span class="hljs-comment">//不及格</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用switch穿透性写，比如说周一周二周三打游戏，周四周五画画，其余睡觉，其中日期的参数是中文周一，周二等等</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print3</span><span class="hljs-params">(String day)</span><br>&#123;<br>    <span class="hljs-keyword">switch</span>(day)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;周一&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;周二&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;周三&quot;</span>:<br>            System.out.println(<span class="hljs-string">&quot;打游戏&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;周四&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;周五&quot;</span>:<br>            System.out.println(<span class="hljs-string">&quot;画画&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            System.out.println(<span class="hljs-string">&quot;睡觉&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//生成[0,10)之间的数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">10</span>);<br><span class="hljs-comment">//Math.random() 生成一个 0.0 （含）到 1.0 （不含）之间的随机浮点数。</span><br><span class="hljs-comment">//Math.random() * 10 将这个浮点数乘以 10，得到一个 0.0 到 9.9 之间的数。</span><br><span class="hljs-comment">//(int) 这个类型转换将浮点数转换为整数，会去掉小数部分，即执行向下取整操作。</span><br><span class="hljs-comment">//最终 num 的值将是 0 到 9 之间的一个整数。</span><br><br><span class="hljs-comment">//生成1-10的随机数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">10</span>)+<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="1-静态初始化数组"><a href="#1-静态初始化数组" class="headerlink" title="1.静态初始化数组"></a>1.静态初始化数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//以下演示所有写法</span><br><span class="hljs-type">int</span>[] a=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br><span class="hljs-type">int</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<span class="hljs-comment">//完整定义</span><br><span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<span class="hljs-comment">//[]位置可以移动到名字后面</span><br><span class="hljs-type">int</span> a[]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;;<br><br><span class="hljs-comment">//访问长度</span><br><span class="hljs-type">int</span> x=a.length;<span class="hljs-comment">//不用()</span><br><br><span class="hljs-comment">//访问元素</span><br><span class="hljs-type">int</span> y=a[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><h3 id="2-动态初始化"><a href="#2-动态初始化" class="headerlink" title="2.动态初始化"></a>2.动态初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//只确定元素类型和容量</span><br><span class="hljs-type">double</span>[] score=<span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">8</span>];<br><span class="hljs-comment">//此时放置了默认值0.0，如果是int默认值0，如果是boolean默认false，string默认null</span><br></code></pre></td></tr></table></figure><h3 id="3-二维数组"><a href="#3-二维数组" class="headerlink" title="3.二维数组"></a>3.二维数组</h3><p><strong>初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//静态初始化</span><br><span class="hljs-type">int</span>[][] a=&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;&#125;;<br><span class="hljs-comment">//动态初始化</span><br><span class="hljs-type">int</span>[][] b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">5</span>];<span class="hljs-comment">//3行5列</span><br><br><span class="hljs-comment">//访问</span><br><span class="hljs-comment">//1.</span><br><span class="hljs-type">int</span>[] x=a[<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> m=x[<span class="hljs-number">1</span>];<br><span class="hljs-comment">//2.</span><br><span class="hljs-type">int</span> n=a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br><span class="hljs-comment">//3.访问长度</span><br><span class="hljs-type">int</span> len1=a.length;<span class="hljs-comment">//3</span><br><span class="hljs-type">int</span> len2=a[<span class="hljs-number">0</span>].length;<span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><h2 id="使用java软件包"><a href="#使用java软件包" class="headerlink" title="使用java软件包"></a>使用java软件包</h2><h3 id="导入相关"><a href="#导入相关" class="headerlink" title="导入相关"></a>导入相关</h3><h4 id="1-包在同一项目不同模块（？）"><a href="#1-包在同一项目不同模块（？）" class="headerlink" title="1.包在同一项目不同模块（？）"></a>1.包在同一项目不同模块（？）</h4><p>要在当前模块中使用其他模块的类，你需要在代码中使用<code>import</code>语句。假设你想在<code>moduleB</code>中使用<code>moduleA</code>中的<code>ClassA</code>类，你可以这样做：</p><p><strong>示例：</strong></p><p>在<code>moduleB/com/example/moduleB/ClassB.java</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-comment">// 导入moduleA中的ClassA</span><br><span class="hljs-keyword">import</span> com.example.moduleA.ClassA;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useClassA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ClassA</span> <span class="hljs-variable">classAInstance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassA</span>();<br>        classAInstance.someMethod(); <span class="hljs-comment">// 调用ClassA中的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-如果包不在当前项目中"><a href="#2-如果包不在当前项目中" class="headerlink" title="2.如果包不在当前项目中"></a>2.如果包不在当前项目中</h4><p><strong>IDE的项目结构设置</strong></p><ul><li>IntelliJ IDEA<ul><li>在项目结构设置中，选择<code>Modules</code>，然后添加外部JAR或项目。</li></ul></li><li>Eclipse<ul><li>右击项目，选择<code>Build Path</code> -&gt; <code>Configure Build Path</code>，然后在<code>Libraries</code>选项卡中添加外部JAR。</li></ul></li></ul><h3 id="如何使用包中的类"><a href="#如何使用包中的类" class="headerlink" title="如何使用包中的类"></a><strong>如何使用包中的类</strong></h3><ul><li>如果你想使用 <code>com.example.myapp</code> 包中的 <code>MyProgram</code> 类，有两种方法：</li></ul><h4 id="方法一：完全限定类名"><a href="#方法一：完全限定类名" class="headerlink" title="方法一：完全限定类名"></a>方法一：<strong>完全限定类名</strong></h4><ul><li>你可以直接使用包名加类名的形式来引用这个类，而不需要使用 <code>import</code> 语句。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        com.example.myapp.<span class="hljs-type">MyProgram</span> <span class="hljs-variable">program</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.example.myapp.MyProgram();<br>        program.display();  <span class="hljs-comment">// 输出: Hello from MyProgram!</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法二：使用-import-语句"><a href="#方法二：使用-import-语句" class="headerlink" title="方法二：使用 import 语句"></a>方法二：<strong>使用 <code>import</code> 语句</strong></h4><ul><li>你也可以使用 <code>import</code> 语句来简化代码中的类引用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.myapp.MyProgram;  <span class="hljs-comment">// 导入 MyProgram 类</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyProgram</span> <span class="hljs-variable">program</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyProgram</span>();  <span class="hljs-comment">// 直接使用类名</span><br>        program.display();  <span class="hljs-comment">// 输出: Hello from MyProgram!</span><br>    &#125;<br>&#125;<span class="hljs-comment">//或直接import com.example.myapp.*; </span><br></code></pre></td></tr></table></figure><h3 id="包命名"><a href="#包命名" class="headerlink" title="包命名"></a>包命名</h3><p>使用反向域名，包名中的点（<code>.</code>）会被解析为目录分隔符（<code>/</code> 或 <code>\</code>），例如 <code>cn.edu.seu</code> 会被解析为 <code>cn/edu/seu</code>。</p><h2 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h2><p>静态方法和普通方法的区别</p><table><thead><tr><th><strong>区别点</strong></th><th><strong>静态方法</strong></th><th><strong>普通方法</strong></th></tr></thead><tbody><tr><td>所属</td><td>类本身</td><td>实例对象</td></tr><tr><td>调用方式</td><td><code>类名.方法名</code>或<code>对象.方法名</code></td><td>必须通过实例对象调用</td></tr><tr><td>访问权限</td><td>只能直接访问静态成员</td><td>可以直接访问静态和实例成员</td></tr><tr><td>生命周期</td><td>随类加载</td><td>随实例的创建与销毁</td></tr><tr><td>是否支持多态</td><td>不支持</td><td>支持</td></tr><tr><td>使用场景</td><td>工具类方法、与对象无关的功能</td><td>依赖对象状态的操作</td></tr></tbody></table><h2 id="访问权限符"><a href="#访问权限符" class="headerlink" title="访问权限符"></a>访问权限符</h2><h3 id="各个修饰符区别"><a href="#各个修饰符区别" class="headerlink" title="各个修饰符区别"></a>各个修饰符区别</h3><table><thead><tr><th>修饰符</th><th>同类内</th><th>同包内</th><th>子类中</th><th>其他包</th></tr></thead><tbody><tr><td><code>public</code></td><td>是</td><td>是</td><td>是</td><td>是</td></tr><tr><td><code>protected</code></td><td>是</td><td>是</td><td>是</td><td>否</td></tr><tr><td><strong>包访问</strong></td><td>是</td><td>是</td><td>否</td><td>否</td></tr><tr><td><code>private</code></td><td>是</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><p>没有写修饰符，默认是包访问</p><p>修饰也可以加在类的前面，只能是public或者是包访问，访问权限限制相同，一个java类文件中只能有一个public类，且和当前文件名相同</p><h3 id="默认包"><a href="#默认包" class="headerlink" title="默认包"></a>默认包</h3><p>在Java中，如果多个类没有显式地声明属于某个包（即没有使用<code>package</code>语句指定包名），那么这些类会被放在<strong>默认包</strong>（也叫“无包”）中。<strong>即使默认包中的类声明为<code>public</code><strong>，其他包中的类</strong>仍然无法访问</strong>它们。这是Java中的一项设计限制。</p><ol><li><strong>默认包和命名包的隔离</strong></li></ol><ul><li><strong>默认包中的类</strong>：当类没有显式声明包时，Java会将它们放在默认包中。</li><li><strong>命名包中的类</strong>：指那些使用了<code>package</code>关键字指定了具体包名的类。</li></ul><p>默认包和命名包之间有严格的隔离，<strong>命名包中的类不能导入默认包中的类</strong>，无论这些默认包中的类是否是<code>public</code>。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>构造函数声明为private，类内部有一个唯一的static实例，同时提供public方法给外部访问这个实例</p><p>外部访问的实例都是同一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Soup2</span> &#123;<br>    <span class="hljs-comment">// 静态变量，持有唯一实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Soup2 uniqueInstance;<br><br>    <span class="hljs-comment">// 私有构造函数，防止外部创建实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Soup2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 初始化代码（如需要）</span><br>    &#125;<br><br>    <span class="hljs-comment">// 公有静态方法，提供获取实例的方式</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Soup2 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 第一次调用时创建实例</span><br>            uniqueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Soup2</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> uniqueInstance; <span class="hljs-comment">// 返回唯一实例</span><br>    &#125;<br><br>    <span class="hljs-comment">// 示例方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serve</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Serving Soup2.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试单例模式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 通过静态方法获取唯一实例</span><br>        <span class="hljs-type">Soup2</span> <span class="hljs-variable">soupInstance1</span> <span class="hljs-operator">=</span> Soup2.getInstance();<br>        <span class="hljs-type">Soup2</span> <span class="hljs-variable">soupInstance2</span> <span class="hljs-operator">=</span> Soup2.getInstance();<br><br>        <span class="hljs-comment">// 测试是否为同一个实例</span><br>        System.out.println(soupInstance1 == soupInstance2); <span class="hljs-comment">// 输出: true</span><br><br>        <span class="hljs-comment">// 调用实例方法</span><br>        soupInstance1.serve(); <span class="hljs-comment">// 输出: Serving Soup2.</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码复用"><a href="#代码复用" class="headerlink" title="代码复用"></a>代码复用</h2><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>通过将现有类的对象作为新类的成员变量来实现代码复用的方法</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>创建一个新类作为现有类的子类，从而使新类<strong>继承现有类的属性和方法</strong>，并可以在新类中扩展新的功能，而无需修改现有类的代码。</p><h2 id="类中变量初始化"><a href="#类中变量初始化" class="headerlink" title="类中变量初始化"></a>类中变量初始化</h2><ol><li><strong>在对象定义时初始化</strong></li><li><strong>在构造方法中初始化</strong></li><li><strong>在实际使用对象之前初始化</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> Engine engine;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startCar</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (engine == <span class="hljs-literal">null</span>) &#123;<br>            engine = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Engine</span>(); <span class="hljs-comment">// 在使用前初始化</span><br>        &#125;<br>        engine.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><strong>使用实例初始化块</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> Engine engine;<br><br>    &#123;<br>        engine = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Engine</span>(); <span class="hljs-comment">// 实例初始化块</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>在Java中，当你创建一个新类时，如果没有显式继承其他类，该类会**自动继承Java标准根类<code>Object</code>**。<code>Object</code>类是Java类的默认父类，其中包含一些基本的方法，例如<code>toString()</code>、<code>equals()</code>、<code>hashCode()</code>等。所有类都继承自<code>Object</code>，因此这些方法在所有Java类中都可用。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>extends</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Eating...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123; <span class="hljs-comment">// Dog类继承Animal类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bark</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Barking...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在Java中，为了更好地支持继承，通常建议将所有<strong>字段声明为<code>private</code><strong>，而将所有</strong>方法声明为<code>public</code></strong></p><h3 id="使用super调用父类方法"><a href="#使用super调用父类方法" class="headerlink" title="使用super调用父类方法"></a>使用<code>super</code>调用父类方法</h3><p>在继承的情况下，如果子类重写了父类的方法，你可能希望在子类的重写方法中调用父类的版本。为此，Java提供了<code>super</code>关键字，专门用于指代父类（“超类”）的方法或字段。这可以确保在保留子类行为的同时，仍然复用父类的某些实现。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal makes a sound&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sound</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.sound(); <span class="hljs-comment">// 调用父类的sound方法</span><br>        System.out.println(<span class="hljs-string">&quot;Dog barks&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，<code>Dog</code>类重写了<code>sound</code>方法，但在方法内部使用<code>super.sound()</code>来调用<code>Animal</code>类中的<code>sound</code>方法，确保调用父类行为的同时，还能添加新的行为。运行后将会输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Animal makes a sound<br>Dog barks<br></code></pre></td></tr></table></figure><h3 id="父类构造函数调用"><a href="#父类构造函数调用" class="headerlink" title="父类构造函数调用"></a>父类构造函数调用</h3><p>创建一个子类对象的时候，如果父类</p><p><strong>有 无参构造方法</strong>：如果子类构造方法中没有显式调用<code>super()</code>，Java会自动调用父类的无参构造方法。</p><p>也可以使用super()显式调用父类的无参构造函数（前提是有，这里同c++，自己有定义了有参编译器就不会自己提供一个无参）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal constructor called&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(); <span class="hljs-comment">// 调用父类构造方法</span><br>        System.out.println(<span class="hljs-string">&quot;Dog constructor called&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>无 无参构造方法</strong>：如果父类只有带参数的构造方法，子类构造方法中必须显式调用父类构造方法并传入相应参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal constructor called with name: &quot;</span> + name);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;Buddy&quot;</span>); <span class="hljs-comment">// 显式调用带参数的父类构造方法</span><br>        System.out.println(<span class="hljs-string">&quot;Dog constructor called&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="伪继承"><a href="#伪继承" class="headerlink" title="伪继承"></a>伪继承</h3><p>在新的类中创建一个<strong>成员对象</strong>，通常是你希望“继承”的类的实例。</p><p>通过在新的类中<strong>公开这个成员对象的方法</strong>，使得外部代码可以调用这些方法，类似于使用继承的方式直接调用父类的方法。</p><p><strong>控制模块类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ControlModule</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">controlDirection</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Controlling direction...&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">controlSpeed</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Controlling speed...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用组合和方法暴露的飞船类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Spaceship</span> &#123;<br>    <span class="hljs-keyword">private</span> ControlModule controlModule;  <span class="hljs-comment">// 组合：创建一个成员对象</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Spaceship</span><span class="hljs-params">()</span> &#123;<br>        controlModule = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ControlModule</span>();  <span class="hljs-comment">// 初始化成员对象</span><br>    &#125;<br><br>    <span class="hljs-comment">// 暴露控制模块的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">controlDirection</span><span class="hljs-params">()</span> &#123;<br>        controlModule.controlDirection();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">controlSpeed</span><span class="hljs-params">()</span> &#123;<br>        controlModule.controlSpeed();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>虽然Java语言本身不直接支持<strong>委托（delegation）</strong>机制，但可以通过以下方式实现类似的行为：</p><ol><li><strong>手动委托</strong>：在类中包含一个成员对象，并将该对象的方法暴露出来，类似于组合的伪继承。</li><li><strong>使用开发工具和库</strong>：一些Java开发工具（如Lombok）和库（如Guava）提供了自动生成委托方法的功能，减少了手动编写代码的麻烦。</li></ol><h3 id="无析构函数"><a href="#无析构函数" class="headerlink" title="无析构函数"></a>无析构函数</h3><p>在Java中，<strong>没有C++中的析构函数</strong>，也就是对象销毁时自动调用的方法。Java依赖于<strong>垃圾收集器（Garbage Collector）</strong>来自动管理内存，当一个对象不再被引用时，垃圾收集器会在合适的时间将其内存释放。然而，<strong>垃圾收集器的调用时机是不确定的</strong>，程序员无法手动控制它的执行。</p><h4 id="对象生命周期中的清理"><a href="#对象生命周期中的清理" class="headerlink" title="对象生命周期中的清理"></a>对象生命周期中的清理</h4><p>在某些情况下，我们的类可能需要在其生命周期中执行特定的清理任务，例如关闭文件、释放资源等。由于垃圾收集器不会立即清理资源，所以如果类需要执行资源清理，通常可以通过以下方式处理：</p><ol><li><strong>显式编写清理方法</strong>：创建一个专门的清理方法（例如<code>close()</code>或<code>dispose()</code>）来执行必要的清理操作，用户应在对象不再使用时显式调用它。</li><li><strong>使用<code>finally</code>子句确保清理</strong>：在需要清理的代码中，可以将清理代码放在<code>try-finally</code>块中，以确保无论是否发生异常，资源都能得到正确释放。</li></ol><p><strong>示例：显式清理和<code>finally</code>子句</strong></p><p>假设有一个类<code>ResourceUser</code>，它打开一个文件并进行读写操作。我们可以通过显式的<code>close()</code>方法来确保资源被清理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourceUser</span> &#123;<br>    <span class="hljs-keyword">private</span> FileReader fileReader;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResourceUser</span><span class="hljs-params">(String fileName)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(fileName);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 假设读取文件内容</span><br>        System.out.println(<span class="hljs-string">&quot;Reading data...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 清理方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (fileReader != <span class="hljs-literal">null</span>) &#123;<br>                fileReader.close();<br>                System.out.println(<span class="hljs-string">&quot;File closed.&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Error closing file: &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ResourceUser</span> <span class="hljs-variable">resourceUser</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            resourceUser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceUser</span>(<span class="hljs-string">&quot;data.txt&quot;</span>);<br>            resourceUser.readData();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Exception: &quot;</span> + e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (resourceUser != <span class="hljs-literal">null</span>) &#123;<br>                resourceUser.close();  <span class="hljs-comment">// 确保文件被关闭</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="清理方法调用顺序"><a href="#清理方法调用顺序" class="headerlink" title="清理方法调用顺序"></a>清理方法调用顺序</h4><p>在Java中，垃圾收集器仅负责<strong>回收内存</strong>，而不是处理资源清理任务，因此程序员无法依赖垃圾收集器来完成类的清理工作。相反，Java开发者需要明确编写<strong>清理方法</strong>来释放资源（例如文件句柄、数据库连接等），并且<strong>不应该依赖<code>finalize()</code>方法</strong>来执行清理。Java的<code>finalize()</code>方法不推荐使用，因为垃圾收集器调用<code>finalize()</code>的时间和次数是不可控的，可能会导致资源未及时释放，甚至资源泄漏。</p><p>为了确保安全有效的清理，Java类的清理顺序应当参考C++的析构函数惯例，即<strong>遵循创建顺序的反向清理</strong>：</p><ol><li><strong>按照子对象的反向顺序进行清理</strong>：先清理类中最后创建的成员对象，再清理先创建的对象。</li><li><strong>在清理成员对象后，调用基类的清理方法</strong>：这样可以确保依赖关系的对象能够正确释放，避免因资源依赖错误造成的问题。</li></ol><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><ul><li>子类可以重写父类的方法，以提供特定实现。</li><li>重写方法必须具有相同的方法名、返回类型和参数列表。</li><li>使用<code>@Override</code>注解来标识重写方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Parent show method.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">// 重写父类方法</span><br>        System.out.println(<span class="hljs-string">&quot;Child show method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意区分override和overload</strong>，前者是继承，子类重写付父类的某个函数，覆盖过去，需要有相同的参数列表；后者是函数重载，是同名函数有着不同的参数列表，实现不同的功能。</p><h3 id="何时继承何时组合"><a href="#何时继承何时组合" class="headerlink" title="何时继承何时组合"></a>何时继承何时组合</h3><ol><li>看类和类之间的关系是什么</li></ol><p>组合：…有…</p><p>继承：…是…</p><ol start="2"><li><strong>关键问题</strong>：问自己是否会需要将新类向上转型为基类。</li></ol><ul><li>如果回答是“是”，即未来需要将子类转换为基类来使用，则<strong>继承</strong>可能是合理的选择。</li><li>如果不需要向上转型，仅是为了使用基类的某些功能而不是接口，那么选择<strong>组合</strong>可能更合适。</li></ul><h3 id="向上转型（upcasting）"><a href="#向上转型（upcasting）" class="headerlink" title="向上转型（upcasting）"></a>向上转型（upcasting）</h3><p>如果有一个函数需要传入参数是一个父类对象，可以直接输入一个子类对象，这里会发生一个向上转型</p><p>在向上转型过程中，子类对象会“失去”一些方法，接口缩窄。这是因为转换为父类类型后，只能访问父类定义的公共方法，而不能直接访问子类特有的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal is eating&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bark</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog is barking&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();  <span class="hljs-comment">// 向上转型，将Dog转换为Animal类型</span><br><br>        animal.eat();   <span class="hljs-comment">// 可以调用Animal的方法</span><br>        <span class="hljs-comment">// animal.bark(); // 无法调用Dog的方法，编译错误</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有助于实现多态，只需要一个接口，可以传入不同的子类，进行不同的操作,</p><p>比如说父类提供一个接口，然后调用子父类都有的同一个函数，<strong>即使向上转型了仍然是调用子类重写后的结果</strong></p><p>但有一个例外，如果父类的某函数声明为private，不能被重写，转型后调用的还是父类的</p><p>如果向上转型后仍然想要使用子类，可以再进行向下转型，再次转变为子类，但是要确保对象确实是该子类的实例，否则会抛出 <code>ClassCastException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Wind</span> <span class="hljs-variable">myWind</span> <span class="hljs-operator">=</span> (Wind) myInstrument; <span class="hljs-comment">// 向下转型</span><br>myWind.adjust(); <span class="hljs-comment">// 正常调用子类特有的方法</span><br></code></pre></td></tr></table></figure><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>用于表示不能修改，可以写在类或者变量的前面，相当于c++中的const</p><h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><p><strong>final变量</strong>：值只能赋值一次，通常用于常量。在声明的时候直接初始化或者在所有构造函数中初始化。</p><p><strong>final方法</strong>：方法不能被子类重写。既可以用来保证方法的逻辑不被子类修改，还可以提高运行效率。编译器可以将 <code>final</code> 方法直接编译为<strong>内联调用</strong>（inline），从而减少方法调用的开销。</p><p><strong>final类</strong>：类不能被继承，用于防止更改类的行为或设计。</p><h3 id="特例"><a href="#特例" class="headerlink" title="特例"></a>特例</h3><ol><li><p><strong><code>static final</code>常量</strong></p><ul><li>当一个字段既是<code>static</code>又是<code>final</code>时，它将有且仅有<strong>一个存储空间</strong>，并且值<strong>不可更改</strong>。这种常量通常用在公共常量或类级常量中，使得所有类实例共享这一不可变值。通常用全大写命名。</li></ul></li><li><p><strong>在 Java 中，如果定义一个 <code>final int[] a</code>，</strong>这意味着</p><ul><li><p><code>a</code> 本身的引用是不可变的：一旦将 <code>a</code> 初始化为某个数组，它就不能再指向其他数组。但<strong>数组中的内容</strong>可以被修改。</p></li><li><p>例如：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 合法，因为修改的是数组中的元素，而不是引用。</span><br>a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;  <span class="hljs-comment">// 不合法，会报错，因为试图改变 `a` 的引用。</span><br></code></pre></td></tr></table></figure></li><li><p>在 Java 中，可以创建<strong>“空白 final”</strong>字段，以下是它的特点和使用：</p><ul><li><p><strong>空白 final 定义</strong>：在声明 <code>final</code> 字段时不赋初始值，这样的字段称为空白 final。</p></li><li><p><strong>初始化要求</strong>：空白 final 字段必须在<strong>每个构造方法</strong>中完成赋值，否则会编译报错，因为 <code>final</code> 字段只能赋值一次。通过这种方式可以确保每个对象创建时，该字段都有明确的值。</p></li></ul></li><li><p>在 Java 中，可以通过在<strong>参数列表</strong>中将参数声明为 <code>final</code> 来使参数不可变。</p></li></ol><h3 id="private方法隐式final"><a href="#private方法隐式final" class="headerlink" title="private方法隐式final"></a>private方法隐式final</h3><p>在 Java 中，类中的任何 <code>private</code> 方法都隐式地具有 <code>final</code> 属性。<code>private</code> 方法对外部类或子类不可见，因此无法被继承或重写。要小心隐含的信息！！！</p><p>可以将 <code>final</code> 明确地添加到 <code>private</code> 方法上，但这不会对方法产生额外意义。</p><h2 id="有继承关系时候类的初始化"><a href="#有继承关系时候类的初始化" class="headerlink" title="有继承关系时候类的初始化"></a>有继承关系时候类的初始化</h2><p>当创建一个子类对象的时候会先创建一个父类对象</p><p>当访问子类的static方法的时候，会先初始化父类中的static变量，然后初始化子类中的static变量，最后调用这个static方法</p><ol><li><p><strong>类加载</strong>：</p><ul><li>当 Java 虚拟机 (JVM) 首次使用某个类时，它会触发该类的加载。这可能是由于创建类的对象、访问类的静态成员或调用静态方法等情况。</li><li>加载的顺序是从父类到子类，确保父类在子类之前被初始化。</li></ul></li><li><p><strong>静态初始化</strong>：</p><ul><li>一旦类被加载，JVM 会执行静态初始化。静态变量和静态块的初始化按顺序执行。</li><li>先初始化父类的静态成员，然后再初始化子类的静态成员。</li></ul></li><li><p><strong>实例初始化</strong>：</p><ul><li>在创建对象时，首先调用父类的构造函数，然后是子类的构造函数。</li><li>在构造函数执行之前，会先初始化实例变量和实例块。</li><li>这意味着，父类的实例变量会在子类构造函数执行之前初始化。</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">//实例化一个子类实例的时候，构建顺序<br>1. Parent static block<br>2. Child static block<br>3. Parent instance block<br>4. Parent constructor<br>5. Child instance block<br>6. Child constructor<br></code></pre></td></tr></table></figure></li></ol><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. <strong>基本语法</strong></h3><p>使用 <code>enum</code> 关键字定义一个枚举类型，通常与类或接口的定义相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Day</span> &#123;<br>    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-使用枚举"><a href="#2-使用枚举" class="headerlink" title="2. 使用枚举"></a>2. <strong>使用枚举</strong></h3><p>可以使用枚举类型来定义变量，并将其赋值为枚举中的常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Day</span> <span class="hljs-variable">today</span> <span class="hljs-operator">=</span> Day.WEDNESDAY;<br><br>        System.out.println(<span class="hljs-string">&quot;Today is: &quot;</span> + today);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-输出枚举值对应的索引值"><a href="#3-输出枚举值对应的索引值" class="headerlink" title="3.输出枚举值对应的索引值"></a>3.输出枚举值对应的索引值</h3><p>可以使用 <code>ordinal()</code> 方法。这个方法返回枚举常量在枚举声明中的位置，索引从 0 开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Day</span> &#123;<br>    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Day day : Day.values()) &#123;<br>            <span class="hljs-comment">// 输出枚举常量及其对应的索引值</span><br>            System.out.println(day + <span class="hljs-string">&quot; corresponds to index: &quot;</span> + day.ordinal());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="域没有多态，方法有多态"><a href="#域没有多态，方法有多态" class="headerlink" title="域没有多态，方法有多态"></a>域没有多态，方法有多态</h3><p>字段在继承中没有多态性，即使子类和父类有同名字段，引用父类类型的变量访问字段时，始终访问的是父类的字段。就算是用向上转型，域的值也是看父类的</p><p>通过父类引用调用子类重写的方法时，实际执行的是子类的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Animal&quot;</span>; <span class="hljs-comment">// 父类字段</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;This is an &quot;</span> + name);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dog&quot;</span>; <span class="hljs-comment">// 子类字段</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;This is a &quot;</span> + name);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">myAnimal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(); <span class="hljs-comment">// 向上转型</span><br><br>        <span class="hljs-comment">// 访问字段</span><br>        System.out.println(<span class="hljs-string">&quot;Field: &quot;</span> + myAnimal.name); <span class="hljs-comment">// 输出 &quot;Field: Animal&quot;</span><br><br>        <span class="hljs-comment">// 调用方法</span><br>        myAnimal.display(); <span class="hljs-comment">// 输出 &quot;This is a Dog&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="static没有多态"><a href="#static没有多态" class="headerlink" title="static没有多态"></a>static没有多态</h3><p>父类的static方法不能被重写，向上转型后访问的是父类的方法，可以被重新定义</p><blockquote><p>父类的private方法也不能被重写，如果你尝试在子类中重写父类的私有方法，编译器不会发出警告，但这种情况实际上并没有实现重写，因为私有方法对子类是不可见的。</p><p>final方法不能被重写，会直接在编译前报错</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal makes a sound&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Static sound from Animal&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog barks&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticSound</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Static sound from Dog&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">myAnimal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(); <span class="hljs-comment">// 向上转型</span><br><br>        <span class="hljs-comment">// 普通方法调用（具有多态性）</span><br>        myAnimal.sound(); <span class="hljs-comment">// 输出 &quot;Dog barks&quot;</span><br><br>        <span class="hljs-comment">// 静态方法调用（不具有多态性）</span><br>        myAnimal.staticSound(); <span class="hljs-comment">// 输出 &quot;Static sound from Animal&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>以下程序为上面知识点的汇总</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Super</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> x=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getx</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">output</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;static method of Super&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;private method of Super&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        Super s1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Super</span>();<br>        System.out.println(<span class="hljs-string">&quot;s1.getx()=&quot;</span>+s1.getx());<br><br>        Sub s2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>        System.out.println(<span class="hljs-string">&quot;s2.getx()=&quot;</span>+s2.getx());<br>        System.out.println(<span class="hljs-string">&quot;s2.getSuperx()=&quot;</span>+s2.getSuperx());<br><br>        System.out.println();<br>        Super s3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>        s3.output();<span class="hljs-comment">//静态方法不能被重写</span><br>        s3.print();<span class="hljs-comment">//私有方法不能被重写</span><br>        System.out.println(<span class="hljs-string">&quot;s3的x=&quot;</span>+s3.x);<span class="hljs-comment">//域不能被重写</span><br>        System.out.println(<span class="hljs-string">&quot;s3.getx()=&quot;</span>+s3.getx());<span class="hljs-comment">//方法可以被重写</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Super</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> x=<span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getx</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSuperx</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.x;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">output</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;static method of Sub&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;private method of Sub&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">s1.getx()=<span class="hljs-number">10</span><br>s2.getx()=<span class="hljs-number">20</span><br>s2.getSuperx()=<span class="hljs-number">10</span><br><br><span class="hljs-keyword">static</span> method of Super<br><span class="hljs-keyword">private</span> method of Super<br>s3的x=<span class="hljs-number">10</span><br>s3.getx()=<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>各个类，即使是父子类的关系，域的名字相同，也无所谓，依旧是各自拥有各自的域，各自的函数访问各自的域</p><h3 id="关于构造函数的特殊性"><a href="#关于构造函数的特殊性" class="headerlink" title="关于构造函数的特殊性"></a>关于构造函数的特殊性</h3><p><strong>构造函数不是多态的</strong>：</p><ul><li>多态性是指相同方法在不同对象上的不同表现。在Java中，构造函数不支持多态性，意味着它们不能被重写（override）。每个类都有自己的构造函数，不会因为子类的存在而改变其行为。</li></ul><p><strong>构造函数是隐式静态方法</strong>：</p><ul><li>虽然构造函数不被称为静态方法，但它们可以被视为一种隐式的静态方法，因为构造函数是在类层级上定义的，而不是在实例层级上。每次创建一个对象时，构造函数被调用，而不依赖于对象的当前状态。</li></ul><p><strong>复杂继承体系中的构造函数</strong>：</p><ul><li>在复杂的类继承关系中，当创建子类对象时，父类的构造函数会被自动调用。这样，父类的初始化操作会在子类的构造函数执行之前完成。理解这种行为在使用多态时非常重要。</li></ul><h3 id="在构造函数中使用多态方法"><a href="#在构造函数中使用多态方法" class="headerlink" title="在构造函数中使用多态方法"></a>在构造函数中使用多态方法</h3><p>在 Java 背景下，如果在构造函数内部调用对象正在构建时的动态绑定方法，会出现以下行为：</p><ul><li>在构造函数中调用动态绑定方法时，<strong>会使用该方法的重写定义</strong>（如果有重写）。</li><li>但是，调用该方法时要注意，因为派生类构造函数尚未完成，可能会导致调用该方法时涉及的派生类成员变量尚未初始化或处于不稳定状态。</li></ul><p><strong>解释</strong>： 这种行为是因为动态绑定（多态）在运行时确定具体调用的是哪个方法。因此，即使调用发生在基类的构造函数中，实际调用的仍然是派生类中重写的方法。</p><p><strong>例子</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br>    Base() &#123;<br>        System.out.println(<span class="hljs-string">&quot;Base constructor called&quot;</span>);<br>        dynamicMethod();<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dynamicMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Base dynamicMethod called&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> <span class="hljs-number">42</span>;<br><br>    Derived() &#123;<br>        System.out.println(<span class="hljs-string">&quot;Derived constructor called&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dynamicMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Derived dynamicMethod called, member = &quot;</span> + member);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstructorExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Derived</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Derived</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">Base constructor <span class="hljs-keyword">called</span><br>Derived dynamicMethod <span class="hljs-keyword">called</span>, <span class="hljs-keyword">member</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>Derived constructor <span class="hljs-keyword">called</span><br></code></pre></td></tr></table></figure><p><strong>解释输出</strong>：</p><ul><li>在 <code>Base</code> 类的构造函数中调用了 <code>dynamicMethod()</code>，由于该方法是动态绑定的，所以调用了 <code>Derived</code> 类的 <code>dynamicMethod()</code>。</li><li>此时 <code>Derived</code> 构造函数尚未运行完毕，<code>member</code> 还没有初始化为 <code>42</code>，所以 <code>member</code> 的值是默认值 <code>0</code>。</li><li>在这种情况下，调用多态方法时要小心，避免依赖尚未初始化的派生类状态。</li><li>因此比较安全的做法是在构造函数中使用final或者private，static方法</li></ul><p><strong>但如果是在构造函数中调用对应的同名的变量，则是使用各自自己的，域没有多态</strong></p><h3 id="协变返回类型"><a href="#协变返回类型" class="headerlink" title="协变返回类型"></a>协变返回类型</h3><p>Java SE5（也称为 Java 1.5）引入了<strong>协变返回类型</strong>这一特性。具体解释如下：</p><ul><li><strong>协变返回类型</strong>允许派生类中重写的方法返回比基类方法更具体的类型，即返回类型可以是基类方法返回类型的子类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    Animal <span class="hljs-title function_">getAnimal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    Dog <span class="hljs-title function_">getAnimal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(); <span class="hljs-comment">// 返回类型是基类返回类型的子类型</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="不滥用继承"><a href="#不滥用继承" class="headerlink" title="不滥用继承"></a>不滥用继承</h3><p>更好的办法是优先用组合</p><ul><li>组合不会强制设计进入继承层次结构 </li><li>组合也更灵活，因为可以动态选择类型 </li><li>继承要求在编译时知道确切的类型（也就是整个继承结构和所有都需要是确定的）</li><li><strong>耦合性</strong>：子类与父类高度耦合，继承的任何变化都可能影响整个继承链。这可能导致代码难以维护和扩展。</li><li><strong>脆弱的基类问题</strong>：如果基类的实现发生变化，子类的行为也可能被影响，从而导致意外的问题。</li></ul><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>使用继承来表示行为的差异，使用字段来表示状态的变化。</p><p>在这种情况下，状态的变化恰好会产生行为的变化</p><p><strong>示例：</strong></p><p>假设我们设计一个状态模式的例子来表示一个上下文（例如，<code>Context</code>）对象的状态变化，<code>State</code> 对象根据当前状态的变化提供不同的行为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义状态接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 具体的状态类1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStateA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Handling request in State A&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 具体的状态类2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStateB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Handling request in State B&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 上下文类，维护一个当前的状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br>    <span class="hljs-keyword">private</span> State currentState;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Context</span><span class="hljs-params">(State state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.currentState = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(State state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.currentState = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span> &#123;<br>        currentState.handleRequest();  <span class="hljs-comment">// 根据当前状态执行相应的行为</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StatePatternExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 初始状态为 ConcreteStateA</span><br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteStateA</span>());<br>        context.request();  <span class="hljs-comment">// 输出: Handling request in State A</span><br><br>        <span class="hljs-comment">// 更改状态为 ConcreteStateB</span><br>        context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteStateB</span>());<br>        context.request();  <span class="hljs-comment">// 输出: Handling request in State B</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="“纯粹”的继承"><a href="#“纯粹”的继承" class="headerlink" title="“纯粹”的继承"></a>“纯粹”的继承</h3><p>为了代码维护，有“纯粹”的继承，也就是只有在基类中建立的方法才会在派生类中被覆盖，子类不会添加新的方法</p><p>派生类对象可以完美地替换基类，并且在使用它们时，您永远不需要了解有关子类的任何额外信息</p><p>基类可以接收您可以发送到派生类的任何消息</p><h3 id="接口扩展"><a href="#接口扩展" class="headerlink" title="接口扩展"></a>接口扩展</h3><p>也就是子类继承自父类后，使用接口进行方法扩展，添加新的方法</p><ul><li>这可以称为“is-like-a”关系 </li><li>它具有相同的基本接口 </li><li>它具有其他需要其他方法才能实现的功能</li></ul><p>缺点：</p><ul><li>派生类中接口的扩展部分无法从基类中获得</li><li>一旦你向上转换，你就不能调用新方法</li><li>您需要重新发现对象的确切类型，以便您可以访问该类型的扩展方法</li></ul><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>将父类对象转换为子类类型，必须确保对象的实际类型匹配，否则会抛出 <code>ClassCastException</code>。</p><h3 id="总结-方法重写的规则"><a href="#总结-方法重写的规则" class="headerlink" title="总结-方法重写的规则"></a>总结-方法重写的规则</h3><ul><li><p>只能在子类中重写，不能在一个类中重写</p></li><li><p>子类重写方法时，必须遵循父类方法的签名（包括参数列表、返回类型等）。</p></li><li><p>返回类型可以是父类方法返回类型的子类型（协变返回类型）。</p></li><li><p>子类方法的访问权限不能比父类方法更严格。</p></li><li><p>只有实例方法才能被重写，静态方法无法重写。</p></li><li><p>声明为 final 的方法不能被覆盖</p></li><li><p>声明为 static 的方法不能被重写，但可以重新声明。</p></li><li><p>这意味着子类可以定义一个相同签名的静态方法，但这并不会影响父类的静态方法。</p></li><li><p>如果方法无法继承，则无法重写。</p></li><li><p>与实例的超类相同的包中的子类可以覆盖任何未声明为 private 或 final 的超类方法。</p></li><li><p>不同包中的子类只能覆盖声明为 public 或 protected 的非 final 方法。</p></li><li><p>重写方法可以引发任何取消选中的异常，无论被重写的方法是否引发异常。</p></li><li><p>但是，重写方法不应引发新的或比被重写方法声明的异常更广泛的已检查异常。与被覆盖的方法相比，覆盖方法可以引发更窄或更少的异常。</p></li><li><p>不能重写构造函数。</p></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><strong>题目1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;private&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Test01 t=<span class="hljs-keyword">new</span> <span class="hljs-title class_">tt01</span>();<br>        t.f();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tt01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Test01</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;public&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span><br></code></pre></td></tr></table></figure><p>private不能被重写</p><p><strong>题目二</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">g</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Test01 t=<span class="hljs-keyword">new</span> <span class="hljs-title class_">tt01</span>();<br>        <span class="hljs-comment">//t.h();不能访问，会报错</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tt01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Test01</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">g</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">h</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意有注释的地方，向上转型，接口缩窄</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li><p>类名前面加abstract，方法可以是抽象的也可以是普通的，抽象方法加abstract</p></li><li><p>如果一个类包含一个或多个抽象方法，则这个类必须是抽象类</p></li><li><p>无法创建抽象类的对象</p></li><li><p>继承一个抽象类，必须给所有抽象方法提供实现</p></li><li><p>一个抽象类可以没有抽象方法</p><ul><li>阻止创建这个类的实例</li></ul></li></ul><h3 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h3><ul><li><p>完整的抽象类，不提供任何实现，</p></li><li><p>创建者确定方法名称、参数列表和返回类型，但是没有方法体</p></li><li><p>一个类可以使用多个接口，也就是可以向上转型成多个不同的类，实现“多重继承”</p></li><li><p>使用interface创建接口</p></li><li><p>可以在interface前面加public</p></li><li><p>接口可以有变量，但是一定是static和final的</p></li><li><p>一旦类实现了接口，该实现就成为一个普通类，这个类可以像其他类一样通过 <code>extends</code> 进行继承。</p></li><li><p>接口中的方法默认是public的，即使没有声明</p></li><li><p>使用接口必须重写接口中的所有函数（默认都是abstract的）</p></li><li><p>和继承一样，使用接口的类（子类）方法的访问权限不能比接口（父类）中的访问权限更严格，对于接口，也就是使用接口的类中实现接口中的方法，其访问权限必须是public</p></li><li><p>只能有静态常量，没有成员变量</p></li></ul><h3 id="toString-函数"><a href="#toString-函数" class="headerlink" title="toString()函数"></a>toString()函数</h3><p>java类中，可以使用print（this），输出类名，它会调用String toString（）函数</p><p>也可以通过重写该函数自定义输出内容，this会运行这个函数然后输出这个函数的返回值</p><h3 id="getClass-getSimpleName-函数"><a href="#getClass-getSimpleName-函数" class="headerlink" title="getClass().getSimpleName()函数"></a>getClass().getSimpleName()函数</h3><p>获取当前对象所属类的简单类名</p><p><strong><code>getClass()</code> 方法</strong>：</p><ul><li>这是 <code>java.lang.Object</code> 类中的方法，用于返回当前对象的 <code>Class</code> 对象。<code>Class</code> 对象包含了与类相关的所有信息，比如类的名称、方法、字段等。</li></ul><p><strong><code>getSimpleName()</code> 方法</strong>：</p><ul><li>这是 <code>Class</code> 类中的方法，用于获取类的简单名称，即不包含包路径的类名。例如，对于 <code>com.example.MyClass</code>，<code>getSimpleName()</code> 会返回 <code>MyClass</code>。</li></ul><h3 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h3><p>设置分隔符，将一个字符串按分隔符拆分成一个String数组返回</p><h3 id="default和private"><a href="#default和private" class="headerlink" title="default和private"></a>default和private</h3><p>在接口中可以使用关键字default来提供方法的实现，可以被继承使用，也可以被重写</p><p>也可以使用private提供私有方法</p><h3 id="完全解耦"><a href="#完全解耦" class="headerlink" title="完全解耦"></a>完全解耦</h3><p>如果是用类和继承，如果想要使用这个基类中的函数，必须符合继承关系，而接口放宽了这个约束，可以编写更多可重用的方法</p><p>使用<strong>策略设计模式</strong></p><p>一个类可以使用多个接口，使用逗号分隔；而继承只能从一个基类继承，其余都必须是接口</p><p>如果可以创建没有任何方法定义或成员变量的基类，则应始终首选接口</p><h3 id="拓展和合并接口"><a href="#拓展和合并接口" class="headerlink" title="拓展和合并接口"></a>拓展和合并接口</h3><p>使用继承向接口添加新的方法声明</p><p>使用继承将多个接口合并为一个新接口</p><h3 id="方法冲突"><a href="#方法冲突" class="headerlink" title="方法冲突"></a>方法冲突</h3><p>如果一个类实现了多个接口，其中这些接口具有相同签名的 <code>default</code> 方法时，就会发生方法冲突。可以在实现类中重写该方法，明确指定应该执行哪一个接口的 <code>default</code> 方法，或者提供新的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterfaceA</span>, InterfaceB &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMessage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 解决冲突：手动选择使用哪个接口的默认方法</span><br>        InterfaceA.<span class="hljs-built_in">super</span>.printMessage(); <span class="hljs-comment">// 调用 InterfaceA 的 printMessage</span><br>        <span class="hljs-comment">// InterfaceB.super.printMessage(); // 调用 InterfaceB 的 printMessage</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是使用的接口或者父类中有相同名字不同参数列表或返回值，不会报错但是容易混淆</p><p>如果接口中的方法不是 <code>default</code> 方法，而是普通的 <strong>抽象方法</strong>（<code>abstract</code> 方法），并且多个接口中定义了<strong>相同签名的抽象方法</strong>，则<strong>不会出错</strong>。</p><h3 id="将接口作为参数输入函数"><a href="#将接口作为参数输入函数" class="headerlink" title="将接口作为参数输入函数"></a>将接口作为参数输入函数</h3><p>方法接收一个接口，则这个方法可以传入任何使用了这个接口的类，不必限制为特定类</p><h3 id="接口中的字段"><a href="#接口中的字段" class="headerlink" title="接口中的字段"></a>接口中的字段</h3><p>接口中的字段自动是static和final的，也是public的</p><p>接口中定义的字段不能是“空白 final”，也就是必须初始化，但是可以使用非常量表达式进行初始化</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Random rand=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">47</span>);<br><span class="hljs-type">int</span> a=rand.nextInt(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><h3 id="类和接口中的接口"><a href="#类和接口中的接口" class="headerlink" title="类和接口中的接口"></a>类和接口中的接口</h3><p>接口可以嵌套在类中，也可以在其他接口中</p><p>类中也可以有类</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p><strong>示例：</strong></p><p>假设有一个接口 <code>Shape</code>，并且不同的实现类有 <code>Circle</code> 和 <code>Rectangle</code>。可以创建一个 <code>ShapeFactory</code> 类来动态创建这些对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Drawing a Circle&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Drawing a Rectangle&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShapeFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> Shape <span class="hljs-title function_">getShape</span><span class="hljs-params">(String shapeType)</span> &#123;<br>        <span class="hljs-keyword">if</span> (shapeType == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (shapeType.equalsIgnoreCase(<span class="hljs-string">&quot;CIRCLE&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (shapeType.equalsIgnoreCase(<span class="hljs-string">&quot;RECTANGLE&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用工厂方法创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ShapeFactory</span> <span class="hljs-variable">shapeFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShapeFactory</span>();<br>        <br>        <span class="hljs-comment">// 获取 Circle 对象并调用它的 draw 方法</span><br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">shape1</span> <span class="hljs-operator">=</span> shapeFactory.getShape(<span class="hljs-string">&quot;CIRCLE&quot;</span>);<br>        shape1.draw();<br>        <br>        <span class="hljs-comment">// 获取 Rectangle 对象并调用它的 draw 方法</span><br>        <span class="hljs-type">Shape</span> <span class="hljs-variable">shape2</span> <span class="hljs-operator">=</span> shapeFactory.getShape(<span class="hljs-string">&quot;RECTANGLE&quot;</span>);<br>        shape2.draw();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优点：</strong></p><ol><li>接口和实现完全分离，用户只需要知道接口，然后使用工厂类即可</li><li>可以透明地将一个实现交换成另一个实现，比如说用户使用工厂类的输入变了，只需要修改工厂类，连接返回新的类的对象即可，便于代码修改</li><li>如果不使用工厂方法设计模式，你的代码中就必须在某处<strong>明确指定要创建的具体服务类型</strong>，以便调用正确的构造函数。</li></ol><blockquote><p>工厂类有点像继承的父类，但是又没有继承的紧耦合</p></blockquote><h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><ol><li>Java中通过函数名字和参数列表判断不同函数，不包括返回值的类型，也就是函数名字和参数列表相同函数认为是一个，尽管返回值不同。也是因此一个类中不能有多个函数有相同的名字和参数列表，但是返回值不同的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">I1</span><br>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">I2</span><br>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">I3</span><br>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">I3</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<span class="hljs-comment">//正确，接口和父类中有名字、返回值和参数列表完全相同的方法，相当于“重合”了，子类直接“一起重写”了</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C5</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">I1</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><span class="hljs-comment">//这里会报错，接口和父类中有同名同参但是返回值不同的函数，这里会混淆</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;f&quot;</span>);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>将一个类放在另一个类里面，是一种代码隐藏机制</p><h3 id="创建内部类以及创建对应的实例"><a href="#创建内部类以及创建对应的实例" class="headerlink" title="创建内部类以及创建对应的实例"></a>创建内部类以及创建对应的实例</h3><p>类的定义和正常类的写法是一样的，直接写在外部类的里面</p><p>如果要在外部类的非静态方法之外的任何地方创建内部类的对象，则必须将该对象的类型指定为<strong>外部类名字.内部类名字</strong>，</p><p>如果是外部类的非静态方法，可以直接使用内部类名字创建一个内部类的实例</p><p>以下是举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test02</span> &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">inner</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInner</span><span class="hljs-params">()</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;showInner&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span><br>    &#123;<br>        inner in=<span class="hljs-keyword">new</span> <span class="hljs-title class_">inner</span>();<br>        in.showInner();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> inner <span class="hljs-title function_">createInner</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">inner</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        Test02 t=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test02</span>();<br>        Test02.inner in=t.<span class="hljs-keyword">new</span> <span class="hljs-title class_">inner</span>();<br>        <br>        Test02.inner in2=t.createInner();<span class="hljs-comment">//可以在外部类写一个返回内部类类型的函数(创造器）来获得一个内部类的实例</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内部类访问外部类"><a href="#内部类访问外部类" class="headerlink" title="内部类访问外部类"></a>内部类访问外部类</h3><p>内部类可以访问外部类的所有成员（变量和函数，变量可以修改，函数可以调用），无论是什么访问类型（包括外部类的私有成员）</p><blockquote><p> 原因：</p><p>当你在Java中创建一个内部类时，编译器会自动在内部类中保存一个指向外部类对象的引用。这样，内部类就可以访问创建它的那个外部类对象的所有成员（包括私有成员）。这使得内部类能够直接使用外部类的实例变量和方法。</p></blockquote><p><strong>使用this访问对应外部类的实例</strong></p><p>在内部类使用对应外部类的引用，使用<strong>外部类名.this</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;OuterClass&quot;</span>;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">printOuterName</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 使用Outer.this引用外部类的实例</span><br>            System.out.println(Outer.<span class="hljs-built_in">this</span>.name);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用-new创建内部类的对象"><a href="#使用-new创建内部类的对象" class="headerlink" title="使用.new创建内部类的对象"></a><strong>使用.new创建内部类的对象</strong></h3><p>在除了外部类的非静态成员方法中，创建一个内部类的对象，要先创建一个外部类的对象，再使用.new</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Test02 t=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test02</span>();<br>Test02.inner in=t.<span class="hljs-keyword">new</span> <span class="hljs-title class_">inner</span>();<br></code></pre></td></tr></table></figure><h3 id="内部类的向上转型"><a href="#内部类的向上转型" class="headerlink" title="内部类的向上转型"></a>内部类的向上转型</h3><p>增强封装，隐藏细节（具体实现）</p><p>外部只知道接口，内部类实现这个接口，外部类写一个返回这个接口的方法，返回一个内部类的实例，把真正的实现隐藏</p><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-comment">// 私有内部类实现了接口</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyInterface</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performAction</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Inner class performing action&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回接口类型的引用，内部类对外不可见</span><br>    <span class="hljs-keyword">public</span> MyInterface <span class="hljs-title function_">getInner</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>(); <span class="hljs-comment">// 向上转型为接口类型</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyInterface</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">performAction</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br>        <span class="hljs-type">MyInterface</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> outer.getInner(); <span class="hljs-comment">// 获取的是接口引用，具体实现被隐藏</span><br>        obj.performAction(); <span class="hljs-comment">// 调用接口方法，实际由内部类实现</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>是定义在方法或代码块中的类，其作用域仅限于定义它的方法或代码块。</p><p>当你解决复杂问题时，如果需要创建一个辅助解决方案的类，而不希望这个类对外公开，就可以在方法中创建它。</p><p>局部内部类的生命周期仅限于方法的执行期间，外部类无法直接访问它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-comment">// 局部内部类定义在方法内</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalInner</span> &#123;<br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;The number is: &quot;</span> + number);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 创建并使用局部内部类实例</span><br>        <span class="hljs-type">LocalInner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalInner</span>();<br>        inner.print();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br>        outer.display(<span class="hljs-number">42</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>它可以访问方法的局部变量（如<code>number</code>），但前提是这些变量必须声明为<code>final</code>（在Java 8及以上版本中，隐式<code>final</code>也可以）。</p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>写法：</p><p>1.实现一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Content</span><br>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">take</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">test03</span><br>&#123;<br>    <span class="hljs-keyword">public</span> Content <span class="hljs-title function_">show</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Content</span>()<br>        &#123;<br>            <span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">take</span><span class="hljs-params">()</span><br>            &#123;<br>                System.out.println(<span class="hljs-string">&quot;a=&quot;</span>+a);<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.继承一个现有类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">father</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">father</span><span class="hljs-params">(String a)</span><br>    &#123;<br>        System.out.println(a);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fa</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;fa&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">test03</span><br>&#123;<br>    <span class="hljs-keyword">public</span> father <span class="hljs-title function_">show2</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">father</span>(<span class="hljs-string">&quot;my&quot;</span>)<span class="hljs-comment">//注意如果父类的构造函数有参数的写法</span><br>        &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fa</span><span class="hljs-params">()</span><br>            &#123;<br>                System.out.println(<span class="hljs-string">&quot;fa2&quot;</span>);<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以在定义的时候对匿名类中的变量进行初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">father</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">father</span><span class="hljs-params">(String a)</span><br>    &#123;<br>        System.out.println(a);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fa</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;fa&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test04</span><br>&#123;<br>    <span class="hljs-keyword">public</span> father <span class="hljs-title function_">show</span><span class="hljs-params">(String a)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">father</span>(a)<br>        &#123;<br>            String ss=a;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fa</span><span class="hljs-params">()</span><br>            &#123;<br>                System.out.println(<span class="hljs-string">&quot;fa3&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">()</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> a;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果想要执行类似构造函数的操作，写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span><br>&#123;<br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">I1</span><br>    &#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> I1 <span class="hljs-title function_">get</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">I1</span>()<br>        &#123;<br>            &#123;System.out.println(<span class="hljs-string">&quot;类似构造函数&quot;</span>);&#125;<span class="hljs-comment">//使用一个花括号括起来内容</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><br>            &#123;<br>                System.out.println(<span class="hljs-string">&quot;f()&quot;</span>);<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h3><p>内部静态类static</p><ol><li><p>如果不需要内部类和外部类进行交互，可以使用</p></li><li><p>创建嵌套类对象不需要外部类的实例，内部类不可以访问外部类非静态的成员</p></li><li><p>普通内部类中不能有静态数据、静态字段和静态类（嵌套类），但是静态内部类可以有</p></li><li><p>没有外部类实例的特殊的this引用</p></li></ol><h3 id="接口里的类"><a href="#接口里的类" class="headerlink" title="接口里的类"></a>接口里的类</h3><p>接口里面可以写一个类，默认是public和static的，是嵌套类</p><p>当你想创建一些通用代码以用于该接口的所有不同实现时，在接口内嵌套一个类是很方便的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">I1</span><br>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">II1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">I1</span><br>    &#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span><br>        &#123;<br>            System.out.println(a);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;f()&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>        &#123;<br>            II1 i=<span class="hljs-keyword">new</span> <span class="hljs-title class_">II1</span>();<br>            i.show();<br>            i.f();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test02</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">I1</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;Test02f()&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        Test02 t=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test02</span>();<br>        t.f();<br>        I1.II1 i=<span class="hljs-keyword">new</span> <span class="hljs-title class_">II1</span>();<br>        i.main(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;sssss&quot;</span>&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="为什么要有内部类？"><a href="#为什么要有内部类？" class="headerlink" title="为什么要有内部类？"></a>为什么要有内部类？</h3><ol><li>内层类继承自一个类或实现一个接口，内层类中的代码会操作外层类中创建的对象，因此可以说，内层类为外层类提供了一个窗口</li><li>每个内部类都可以独立继承一个实现。因此，内层类不受外层类是否已从实现继承的限制。可以实现类似于一个类继承自多个类。（接口也可以这样写，但是接口比较自由，可以一个类实现多个接口）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>&#123;<br>    A()<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;A()&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span><br>&#123;<br>    B()<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;B()&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> B <span class="hljs-title function_">getB</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestC</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(A a)</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">(B b)</span> &#123;&#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String arg[])</span><br>    &#123;<br>        C c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br>        TestC tc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TestC</span>();<br>        tc.f1(c);<br>        tc.f2(c.getB());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果不需要实现“多重继承”，理论上不需要用内部类</p><p>使用内部类可以获得以下额外功能：</p><ol><li>内部类可以有多个实例，每个实例都有自己的状态信息，而这些状态信息独立于外部类对象中的信息。</li><li>在一个外部类中，你可以有多个内部类，每个内部类以不同的方式实现相同的接口或继承自相同的类。</li><li>内部类对象的创建点不受限于外部类对象的创建。</li><li>内部类与外部类不存在令人困惑的“is-a”（是一个）关系；内部类是一个独立的实体。</li></ol><h3 id="继承一个内部类"><a href="#继承一个内部类" class="headerlink" title="继承一个内部类"></a>继承一个内部类</h3><p>内部类可以被继承，但是继承的子类需要显式调用内部类的外部类的构造函数</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">inner</span><br>    &#123;<br>        &#123;System.out.println(<span class="hljs-string">&quot;内部类构造函数&quot;</span>);&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tt1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Test01</span>.inner<span class="hljs-comment">//注意写法</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">tt1</span><span class="hljs-params">(Test01 t)</span><span class="hljs-comment">//注意这里，内部类不是static，要传入一个外部类的示例来初始化</span><br>    &#123;<br>        t.<span class="hljs-built_in">super</span>();<br>        System.out.println(<span class="hljs-string">&quot;子类构造函数&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">testTest01</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        tt1 t=<span class="hljs-keyword">new</span> <span class="hljs-title class_">tt1</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test01</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="当在继承的外部类中重新定义内部类"><a href="#当在继承的外部类中重新定义内部类" class="headerlink" title="当在继承的外部类中重新定义内部类"></a>当在继承的外部类中重新定义内部类</h3><p>如果你在一个类中定义了一个内部类，然后继承这个外部类并在派生类中重新定义同名的内部类，这两个内部类会被视为<strong>完全独立的实体</strong>，并且它们属于各自外部类的命名空间，彼此没有任何关联，<strong>不会互相覆盖或继承</strong>，重定义的内部类是一个全新的类</p><p>也可以<strong>显示地扩展内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test02</span> &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">inner</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;内部类的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">g</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;外部类的函数&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tt02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Test02</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">g</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;继承类的重写外部类的函数&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">in</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Test02</span>.inner&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;重写内部类的f()&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">h</span><span class="hljs-params">()</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;内部类的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">testTest02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        tt02 t=<span class="hljs-keyword">new</span> <span class="hljs-title class_">tt02</span>();<br>        tt02.in i1=t.<span class="hljs-keyword">new</span> <span class="hljs-title class_">in</span>();<br>        i1.f();<br><br>        Test02 test02=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test02</span>();<br>        Test02.inner i2=test02.<span class="hljs-keyword">new</span> <span class="hljs-title class_">inner</span>();<br>        i2.f();<br><br>        Test02.inner i3=t.<span class="hljs-keyword">new</span> <span class="hljs-title class_">in</span>();<br>        i3.f();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果是</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">重写内部类的f()<br>内部类的函数<br>重写内部类的f()<br></code></pre></td></tr></table></figure><p>可以看出来父类的内部类被重写了（这部分依然存疑，后面再思考）</p><h3 id="局部内部类-1"><a href="#局部内部类-1" class="headerlink" title="局部内部类"></a>局部内部类</h3><ul><li><p>内部类也可以在代码块中创建，通常是在方法体内。</p></li><li><p>局部内部类不能拥有访问修饰符，因为它不是外部类的一部分。</p></li><li><p>它确实可以访问当前代码块中的<code>final</code>变量以及外部类的所有成员。</p></li></ul><p><strong>为什么使用局部内部类而不是匿名内部类</strong></p><ul><li><p>如果需要命名构造函数或重载构造函数，因为匿名内部类只能使用实例初始化。</p><ul><li><strong>局部内部类</strong>允许你为类定义命名的构造函数或重载构造函数。这意味着你可以为类提供不同的构造方式来初始化对象。</li></ul></li><li><p>另一个选择局部内部类而非匿名内部类的理由是，如果你需要创建该类的多个对象。</p><ul><li><strong>匿名内部类</strong>是没有类名的，因此每次实例化时都会创建一个匿名类的唯一实例。局部内部类允许命名并且多次实例化。</li></ul></li></ul><h3 id="class文件"><a href="#class文件" class="headerlink" title=".class文件"></a>.class文件</h3><p>每个类都会生成一个 <code>.class</code> 文件，该文件包含了如何创建该类型对象的所有信息。</p><p>内部类也必须生成 <code>.class</code> 文件，以包含它们的 <code>Class</code> 对象信息。</p><p>内部类的 <code>.class</code> 文件名由外部类的名称、一个 <code>$</code> 符号和内部类的名称组成。</p><ul><li>如果内部类是匿名的，编译器会为其生成一个数字作为内部类标识符。</li><li>如果内部类嵌套在其他内部类中，它们的名称会在外部类标识符后追加 <code>$</code> 和内部类的标识符。</li></ul><p><strong>示例：</strong></p><p>假设有如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerMost</span> &#123;<br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;InnerMost&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个类的编译会生成以下 <code>.class</code> 文件：</p><ul><li><code>Outer.class</code> —— 外部类的字节码文件</li><li><code>Outer$Inner.class</code> —— <code>Outer</code> 类中的 <code>Inner</code> 内部类的字节码文件</li><li><code>Outer$Inner$InnerMost.class</code> —— <code>Inner</code> 类中的 <code>InnerMost</code> 内部类的字节码文件</li></ul><p>如果有匿名内部类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Running&quot;</span>);<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后会生成类似以下的文件：</p><ul><li><code>Outer.class</code></li><li><code>Outer$1.class</code> —— 匿名内部类的字节码文件（编译器生成的数字 <code>1</code> 作为标识符）</li></ul><p>这些文件包含了相应的类信息，使得 JVM 可以加载和使用这些类。</p><h3 id="易错点-1"><a href="#易错点-1" class="headerlink" title="易错点"></a>易错点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">D</span><br>    &#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">D</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><br>        &#123;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DImp2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">D</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><br>        &#123;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> D dReg;<br>    <span class="hljs-keyword">public</span> D <span class="hljs-title function_">getD</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DImp2</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveD</span><span class="hljs-params">(D d)</span><br>    &#123;<br>        dReg=d;<br>        dReg.f();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestA</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br><br>        a1.getD().f();<span class="hljs-comment">//错误，接口是私有的，无法访问它的方法</span><br><br>        <span class="hljs-type">A</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        a2.receiveD(a1.getD());<span class="hljs-comment">//正确写法</span><br><br>        A.<span class="hljs-type">D</span> <span class="hljs-variable">ad</span> <span class="hljs-operator">=</span> a1.getD();<span class="hljs-comment">//错误，D是私有的无法访问</span><br>        A.<span class="hljs-type">DImp2</span> <span class="hljs-variable">di2</span> <span class="hljs-operator">=</span> a1.getD();<span class="hljs-comment">//向下转型需要显式的进行转换</span><br>        A.<span class="hljs-type">DImp2</span> <span class="hljs-variable">dis3</span> <span class="hljs-operator">=</span> (A.DImp2) a1.getD();<span class="hljs-comment">//是上面一行的正确写法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例题2</p><p>写运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">egg2</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Yolk</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Yolk</span><span class="hljs-params">()</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;Egg2.Yolk()&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;Egg2.Yolk.f()&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Yolk y=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Yolk</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">egg2</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;New egg2()&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertYolk</span><span class="hljs-params">(Yolk yy)</span><br>    &#123;<br>        y=yy;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">g</span><span class="hljs-params">()</span><br>    &#123;<br>        y.f();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BigEgg2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">egg2</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Yolk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">egg2</span>.Yolk<br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Yolk</span><span class="hljs-params">()</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;BigEgg2.Yolk()&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;BigEgg2.Yolk.f()&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BigEgg2</span><span class="hljs-params">()</span><br>    &#123;<br>        insertYolk(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Yolk</span>());<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        egg2 e2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigEgg2</span>();<br>        e2.g();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">Egg2.Yolk()<br>New egg2()<br>Egg2.Yolk()<br>BigEgg2.Yolk()<br>BigEgg2.Yolk.f()<br></code></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p>类似于c++中的模板</p></blockquote><p>使用 Java SE5 之前的容器的问题之一是，编译器允许你在容器中插入不正确的类型。使用泛型，可以在编译时防止将错误类型的对象放入容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Apple&gt; apples = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>apples.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>());  <span class="hljs-comment">// 正确</span><br>apples.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Orange</span>()); <span class="hljs-comment">// 编译错误，因为不能将 Orange 类型的对象添加到 Apple 类型的 ArrayList 中。</span><br></code></pre></td></tr></table></figure><p>角括号包围着类型参数（可能不止一个），这些参数指定了容器的该实例可以容纳的类型</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="概念和分类"><a href="#概念和分类" class="headerlink" title="概念和分类"></a>概念和分类</h3><ol><li><strong>Collection（集合）</strong>：</li></ol><ul><li>它是一个元素的序列，其中可能应用了一些规则来管理这些元素。具体的集合类型包括：<ul><li><strong>List（列表）</strong>：必须按照元素插入的顺序存储和访问元素。<ul><li><strong>特点</strong>：元素有顺序，可以包含重复元素。</li><li><strong>示例</strong>：<code>ArrayList</code>、<code>LinkedList</code>。</li></ul></li><li><strong>Set（集合）</strong>：不允许包含重复元素。<ul><li><strong>特点</strong>：元素无序或有序，且每个元素只能出现一次。</li><li><strong>示例</strong>：<code>HashSet</code>、<code>TreeSet</code>。</li></ul></li><li><strong>Queue（队列）</strong>：按照队列规则（如先进先出FIFO）来处理元素。<ul><li><strong>特点</strong>：元素按队列纪律（如FIFO）排序。</li><li><strong>示例</strong>：<code>LinkedList</code>、<code>PriorityQueue</code>。</li></ul></li></ul></li></ul><ol start="2"><li><strong>Map（映射）</strong>：</li></ol><ul><li>它是一组键值对（key-value pairs），允许你通过键来查找对应的值。<ul><li><strong>特点</strong>：通过键（key）来访问值（value），类似于查字典。一个 Map 允许你根据一个对象（键）来查找另一个对象（值）。</li><li><strong>示例</strong>：<code>HashMap</code>、<code>TreeMap</code>。</li><li><strong>别名</strong>：映射（Map）也可以被称为<strong>关联数组</strong>（associative array）或<strong>字典</strong>（dictionary），因为它像字典一样通过一个单词（键）查找定义（值）。</li></ul></li></ul><h3 id="作为接口使用"><a href="#作为接口使用" class="headerlink" title="作为接口使用"></a>作为接口使用</h3><p><strong>优点：</strong></p><ul><li><p><strong>易于更改实现</strong>：只需在创建对象时更改实现类，之后的代码中就不需要做修改。这样可以灵活地替换不同的实现类。</p></li><li><p><strong>上转型</strong>（Upcasting）</p><p>创建一个具体类的对象，并将其上转型为相应的接口类型，然后在代码的其他部分通过接口来操作对象。</p><ul><li>这种方法可以让代码更具通用性，避免直接依赖具体的实现类，从而提高代码的灵活性和可维护性。</li></ul></li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <span class="hljs-comment">// 使用具体实现类创建对象</span><br>list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();  <span class="hljs-comment">// 可以轻松替换为其他实现类，无需修改后续代码</span><br></code></pre></td></tr></table></figure><p><strong>问题：</strong></p><ul><li><p>并非所有情况都适用</p><p>这种方法并不总是能解决所有问题，因为有些实现类可能包含接口中没有的方法。</p><ul><li><strong>例如</strong>：<code>LinkedList</code> 类有一些特定的方法（如 <code>addFirst()</code> 和 <code>addLast()</code>），这些方法并不在 <code>List</code> 接口中定义。如果你将 <code>LinkedList</code> 上转型为 <code>List</code> 接口类型，那么你就无法直接使用这些特定的方法。</li></ul></li></ul><h3 id="添加元素的方法"><a href="#添加元素的方法" class="headerlink" title="添加元素的方法"></a>添加元素的方法</h3><ol><li>Arrays.asList()</li></ol><p>​接收数组或逗号分隔的元素列表（使用 varargs），并将其转换为 List 对象返回</p><ol start="2"><li>Collections.addAll()</li></ol><p>​获取一个集合对象和一个数组或一个逗号分隔的列表，并将元素添加到集合中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<span class="hljs-comment">//记得要导包</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 示例 1: 使用 Arrays.asList()</span><br>        String[] array = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;;<br>        List&lt;String&gt; listFromArray = Arrays.asList(array);  <span class="hljs-comment">// 将数组转换为 List</span><br>        System.out.println(listFromArray);  <span class="hljs-comment">// 输出: [Apple, Banana, Cherry]</span><br><br>        <span class="hljs-comment">// 示例 2: 使用 Collections.addAll()</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>);  <span class="hljs-comment">// 向集合中添加元素</span><br>        System.out.println(list);  <span class="hljs-comment">// 输出: [Apple, Banana, Cherry]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Arrays.asList()</code> 的一个局限性是，它会根据传入参数的类型推断返回的 <code>List</code> 类型，并且不会考虑你将其赋值给什么类型的变量。这种方式有时会导致问题。可以在 Arrays.asList( ) 中插入一个 “提示 “， 这叫做显式类型参数规范，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] stringArray = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;;<br>List&lt;Object&gt; objectList = Arrays.&lt;Object&gt;asList(stringArray);  <span class="hljs-comment">// 显式指定类型参数</span><br>System.out.println(objectList);  <span class="hljs-comment">// 输出: [Apple, Banana, Cherry]</span><br></code></pre></td></tr></table></figure><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><p>使用 Arrays.toString() </p><p>如果是list，会默认调用，直接print就行；如果是数组，需要显式调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用 ArrayList</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>));<br>        System.out.println(list);  <span class="hljs-comment">// 输出: [Apple, Banana, Cherry]</span><br><br>        <span class="hljs-comment">// 使用数组</span><br>        String[] fruits = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;;<br>        System.out.println(Arrays.toString(fruits));  <span class="hljs-comment">// 输出: [Apple, Banana, Cherry]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p><strong>类型</strong></p><ol><li>ArrayList</li></ol><p>​擅长随机访问元素，但在 List 中间插入和删除元素时速度较慢 </p><ol start="2"><li>LinkedList</li></ol><p>​提供最佳的顺序访问，从 List 中间插入和删除元素的成本较低。关联列表的随机访问速度相对较慢，但它比 ArrayList 拥有更多的功能集</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器用来获取下一个元素，只能朝一个方向移动</p><p>功能集：</p><ol><li>iterator():要求集合向你提供一个迭代器。该迭代器将准备好返回序列中的第一个元素</li><li>next():使用 next( ) 获取序列中的下一个对象</li><li>hasNext( ) :使用 hasNext( ) 查看序列中是否还有其他对象</li><li>remove( ):这个方法只能在调用 <code>next()</code> 方法之后使用，因为它删除的是上次通过 <code>next()</code> 方法返回的元素。</li></ol><p>迭代器统一了对容器的访问，</p><p>获取一个迭代器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator&lt;String&gt; it = list.iterator();<span class="hljs-comment">//list在前面已拥有</span><br></code></pre></td></tr></table></figure><h3 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h3><p>是 Iterator 更强大的子类型，仅由 List 类产生，ListIterator 是双向的</p><p><strong>常用方法</strong></p><ol><li>**<code>hasNext()</code>**：检查是否有下一个元素。<ul><li><strong>返回值</strong>：<code>true</code> 如果存在下一个元素，<code>false</code> 否则。</li></ul></li><li>**<code>next()</code>**：返回下一个元素，并将游标向前移动。<ul><li><strong>返回值</strong>：集合中的下一个元素。</li></ul></li><li>**<code>hasPrevious()</code>**：检查是否有前一个元素。<ul><li><strong>返回值</strong>：<code>true</code> 如果存在前一个元素，<code>false</code> 否则。</li></ul></li><li>**<code>previous()</code>**：返回前一个元素，并将游标向后移动。<ul><li><strong>返回值</strong>：集合中的前一个元素。</li></ul></li><li>**<code>nextIndex()</code>**：返回下一个元素的索引。<ul><li><strong>返回值</strong>：下一个元素的索引，如果没有下一个元素，则返回集合的大小。</li></ul></li><li>**<code>previousIndex()</code>**：返回前一个元素的索引。<ul><li><strong>返回值</strong>：前一个元素的索引，如果没有前一个元素，则返回 -1。</li></ul></li><li>**<code>add(E e)</code>**：在当前游标位置插入一个元素。<ul><li><strong>参数</strong>：<code>e</code> 要插入的元素。</li><li><strong>说明</strong>：元素会被插入到游标当前位置，游标指向插入的元素后面。</li></ul></li><li>**<code>set(E e)</code>**：替换游标指向的元素。<ul><li><strong>参数</strong>：<code>e</code> 替换的元素。</li><li><strong>说明</strong>：用指定的元素替换游标当前指向的元素。</li></ul></li><li>**<code>remove()</code>**：删除游标指向的元素。<ul><li><strong>说明</strong>：删除游标当前位置的元素，游标指向删除元素的下一个元素</li></ul></li></ol><p><code>list.listIterator(3)</code> 是 <code>List</code> 接口的 <code>listIterator()</code> 方法的一种重载版本，它返回一个 <code>ListIterator</code>，该迭代器从列表中指定索引（此例中为 <code>3</code>）处开始遍历。</p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>链接列表可用作堆栈、队列或双端队列（deque）</p><p>方法：</p><ol><li>getFirst( )和 element( )：它们都返回列表的头（第一个元素）而不删除它，如果列表为空，则抛出 NoSuchElementException 异常</li><li>peek( )：是上面两种方法的变体，如果列表为空，则返回空值</li><li>removeFirst( ) 和 remove( )：移除并返回列表的首部，如果列表为空，则抛出 NoSuchElementException 异常</li><li>poll( ) ：移除并返回链表中的第一个元素。如果该列表为空，则返回 null</li><li>addFirst( )：在列表开头插入一个元素</li><li>offer( ) 与 add( ) 和 addLast( ) ：它们都是在列表的尾部（末尾）添加一个元素。</li><li>removeLast( ) ： 删除并返回列表中的最后一个元素</li></ol><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>元素不可重复。查找通常是对集合最重要的操作，因此通常会选择 实现，该实现已针对快速查找进行了优化</p><p><strong>三者对比总结：</strong></p><table><thead><tr><th><strong>特性</strong></th><th><strong>HashSet</strong></th><th><strong>TreeSet</strong></th><th><strong>LinkedHashSet</strong></th></tr></thead><tbody><tr><td><strong>底层结构</strong></td><td>哈希表</td><td>红黑树</td><td>哈希表 + 双向链表</td></tr><tr><td><strong>顺序</strong></td><td>无序（由哈希函数决定）</td><td>自然排序或提供的比较器排序</td><td>插入顺序</td></tr><tr><td><strong>查找速度</strong></td><td>快（O(1)）</td><td>较慢（O(log n)）</td><td>快（O(1)）</td></tr><tr><td><strong>额外功能</strong></td><td>无</td><td>支持排序、范围查询</td><td>保留插入顺序</td></tr></tbody></table><p>最常见的操作之一是使用 <code>contains()</code> 方法测试集合中的成员关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        set.add(<span class="hljs-string">&quot;apple&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;banana&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;cherry&quot;</span>);<br><br>        System.out.println(set.contains(<span class="hljs-string">&quot;apple&quot;</span>));  <span class="hljs-comment">// 输出: true</span><br>        System.out.println(set.contains(<span class="hljs-string">&quot;grape&quot;</span>));  <span class="hljs-comment">// 输出: false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>提供映射关系</p><p>用法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个 HashMap</span><br>        Map&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 1. put(key, value): 添加键值对</span><br>        map.put(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Apple&quot;</span>);<br>        map.put(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Banana&quot;</span>);<br>        map.put(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;Cherry&quot;</span>);<br><br>        <span class="hljs-comment">// 2. get(key): 根据键获取对应的值</span><br>        System.out.println(<span class="hljs-string">&quot;Key 2&#x27;s value: &quot;</span> + map.get(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 输出: Banana</span><br><br>        <span class="hljs-comment">// 3. containsKey(key): 判断是否存在某个键</span><br>        System.out.println(<span class="hljs-string">&quot;Contains key 3? &quot;</span> + map.containsKey(<span class="hljs-number">3</span>)); <span class="hljs-comment">// 输出: true</span><br><br>        <span class="hljs-comment">// 4. containsValue(value): 判断是否存在某个值</span><br>        System.out.println(<span class="hljs-string">&quot;Contains value &#x27;Apple&#x27;? &quot;</span> + map.containsValue(<span class="hljs-string">&quot;Apple&quot;</span>)); <span class="hljs-comment">// 输出: true</span><br><br>        <span class="hljs-comment">// 5. remove(key): 删除键值对</span><br>        map.remove(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;Map after removing key 1: &quot;</span> + map); <span class="hljs-comment">// 输出: &#123;2=Banana, 3=Cherry&#125;</span><br><br>        <span class="hljs-comment">// 6. size(): 获取键值对数量</span><br>        System.out.println(<span class="hljs-string">&quot;Map size: &quot;</span> + map.size()); <span class="hljs-comment">// 输出: 2</span><br><br>        <span class="hljs-comment">// 7. isEmpty(): 判断 Map 是否为空</span><br>        System.out.println(<span class="hljs-string">&quot;Is map empty? &quot;</span> + map.isEmpty()); <span class="hljs-comment">// 输出: false</span><br><br>        <span class="hljs-comment">// 8. 遍历键值对</span><br>        System.out.println(<span class="hljs-string">&quot;Traversing the map:&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Key: &quot;</span> + entry.getKey() + <span class="hljs-string">&quot;, Value: &quot;</span> + entry.getValue());<br>        &#125;<br><br>        <span class="hljs-comment">// 9. keySet(): 获取所有键</span><br>        System.out.println(<span class="hljs-string">&quot;All keys: &quot;</span> + map.keySet()); <span class="hljs-comment">// 输出: [2, 3]</span><br><br>        <span class="hljs-comment">// 10. values(): 获取所有值</span><br>        System.out.println(<span class="hljs-string">&quot;All values: &quot;</span> + map.values()); <span class="hljs-comment">// 输出: [Banana, Cherry]</span><br><br>        <span class="hljs-comment">// 11. clear(): 清空 Map</span><br>        map.clear();<br>        System.out.println(<span class="hljs-string">&quot;Map after clear: &quot;</span> + map); <span class="hljs-comment">// 输出: &#123;&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><ul><li><p>先进先出</p></li><li><p>队列通常用于将对象从程序的一个区域可靠地传输到另一个区域</p></li><li><p>LinkedList 有支持队列行为的方法，而且它实现了队列接口，因此 LinkedList 可以作为队列实现使用</p></li><li><p>常用方法：</p></li></ul><ol><li>offer( ) ：如果可以，则在队列尾部插入一个元素，否则返回 false</li><li>peek( ) 和 element( ) ： 都返回队列的首部而不删除它，peek( ) 如果队列为空返回 null ，element( ) 引发 NoSuchElementException 异常</li><li>poll( ) 和 remove( ) ：都会移除并返回队列的头部 ， poll( ) 如果队列为空，则返回 null ， remove( ) 引发 NoSuchElementException</li></ol><p><strong>优先队列：</strong></p><p>PriorityQueue 进入队列的时候被排序，可确保在调用 peek( )、poll( )或 remove( )时，获得的元素将是优先级最高的元素</p><ul><li>默认使用自然排序（<code>Comparable</code> 接口，如整数按从小到大排序）。</li><li>可以自定义比较器（<code>Comparator</code>），如整数按从大到小排序。</li></ul><p><strong>如何自定义排序方式：</strong></p><p>1.通过让你的对象类实现 <code>Comparable&lt;T&gt;</code> 接口，定义自然排序。</p><ul><li><p>实现 <code>Comparable&lt;T&gt;</code> 接口。</p></li><li><p>重写 <code>compareTo(T o)</code> 方法。</p><ul><li><p>返回负值：当前对象小于参数对象。</p></li><li><p>返回正值：当前对象大于参数对象。</p></li><li><p>返回 0：两个对象相等。</p></li><li><p>如果比较器返回负值，<code>t2</code> 会排在 <code>t1</code> 的前面。</p><p>如果比较器返回正值，<code>t1</code> 会排在 <code>t2</code> 的前面。</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Task&gt; &#123;<br>    String name;<br>    <span class="hljs-type">int</span> priority;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Task</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> priority)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.priority = priority;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Task other)</span> &#123;<br>        <span class="hljs-comment">// 优先级从高到低排序</span><br>        <span class="hljs-keyword">return</span> Integer.compare(other.priority, <span class="hljs-built_in">this</span>.priority);<br>        <span class="hljs-comment">//如果是优先级从低到高</span><br>        <span class="hljs-comment">//return Integer.compare(this.priority, other.priority);</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot; (优先级: &quot;</span> + priority + <span class="hljs-string">&quot;)&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        PriorityQueue&lt;Task&gt; taskQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();<br><br>        taskQueue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-string">&quot;任务1&quot;</span>, <span class="hljs-number">5</span>));<br>        taskQueue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-string">&quot;任务2&quot;</span>, <span class="hljs-number">1</span>));<br>        taskQueue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-string">&quot;任务3&quot;</span>, <span class="hljs-number">3</span>));<br><br>        <span class="hljs-keyword">while</span> (!taskQueue.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;处理任务: &quot;</span> + taskQueue.poll());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>通过构造函数传递一个 <code>Comparator</code> 比较器，定义排序规则。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> priority;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Task</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> priority)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.priority = priority;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot; (优先级: &quot;</span> + priority + <span class="hljs-string">&quot;)&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 自定义 Comparator，按优先级从高到低排序</span><br>        PriorityQueue&lt;Task&gt; taskQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Task&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Task t1, Task t2)</span> &#123;<br>                <span class="hljs-keyword">return</span> Integer.compare(t2.priority, t1.priority); <span class="hljs-comment">// 高优先级排前面</span><br>            &#125;<br>        &#125;);<br><br>        taskQueue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-string">&quot;任务1&quot;</span>, <span class="hljs-number">5</span>));<br>        taskQueue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-string">&quot;任务2&quot;</span>, <span class="hljs-number">1</span>));<br>        taskQueue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-string">&quot;任务3&quot;</span>, <span class="hljs-number">3</span>));<br><br>        <span class="hljs-keyword">while</span> (!taskQueue.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;处理任务: &quot;</span> + taskQueue.poll());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以用 Lambda 表达式简化 <code>Comparator</code> 的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        PriorityQueue&lt;Task&gt; taskQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((t1, t2) -&gt; Integer.compare(t2.priority, t1.priority));<br><br>        taskQueue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-string">&quot;任务1&quot;</span>, <span class="hljs-number">5</span>));<br>        taskQueue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-string">&quot;任务2&quot;</span>, <span class="hljs-number">1</span>));<br>        taskQueue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-string">&quot;任务3&quot;</span>, <span class="hljs-number">3</span>));<br><br>        <span class="hljs-keyword">while</span> (!taskQueue.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;处理任务: &quot;</span> + taskQueue.poll());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="补充：语法糖"><a href="#补充：语法糖" class="headerlink" title="补充：语法糖"></a>补充：语法糖</h3><p>是一种编程语言设计中的概念，指的是对代码编写更友好、更简洁的语法形式。它本质上并不改变语言的功能，而是通过提供更简洁或直观的表达方式，让代码更易读、更易写。</p><p><strong>Java 中的语法糖</strong></p><ol><li><p><strong>增强的 <code>for</code> 循环（foreach）</strong></p><ul><li><p>语法糖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] numbers = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> number : numbers) &#123;<br>    System.out.println(number);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>底层实现：</p><p> 实际上是通过迭代器遍历集合或数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numbers.length; i++) &#123;<br>    System.out.println(numbers[i]);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>自动装箱与拆箱</strong></p><ul><li><p>语法糖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;  <span class="hljs-comment">// 自动装箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> num;       <span class="hljs-comment">// 自动拆箱</span><br></code></pre></td></tr></table></figure></li><li><p>底层实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">10</span>);  <span class="hljs-comment">// 自动装箱的实际方法调用</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> num.intValue();            <span class="hljs-comment">// 自动拆箱的实际方法调用</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>Lambda 表达式</strong></p><ul><li><p>语法糖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; System.out.println(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>底层实现：</p><p> 转换为匿名类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="集合和迭代器"><a href="#集合和迭代器" class="headerlink" title="集合和迭代器"></a>集合和迭代器</h3><p>集合是描述所有序列容器通用内容的根接口，使用接口的一个理由是，它可以让你创建更通用的代码，标准 C++ 库没有通用的容器基类，容器之间的通用性都是通过迭代器实现的，在 Java 中，它使用迭代器而不是集合来表达容器之间的共通性，这两种方法结合在一起，因为实现 Collection 也意味着提供一个 iterator( ) 方法</p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>Java SE5 引入了一个名为 Iterable 的新接口，该接口包含一个 iterator( ) 方法，用于生成一个 Iterator，如果你创建了任何实现 Iterable 的类，就可以在 foreach 语句中使用它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] numbers = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> number : numbers) &#123;<br>    System.out.println(number);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO</title>
      <link href="/my_blog/2025/01/12/IO/"/>
      <url>/my_blog/2025/01/12/IO/</url>
      
        <content type="html"><![CDATA[<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><h3 id="操作系统差异"><a href="#操作系统差异" class="headerlink" title="操作系统差异"></a>操作系统差异</h3><ul><li>路径字符串依赖于操作系统，例如Windows使用反斜杠<code>\</code>，Unix&#x2F;Linux使用正斜杠<code>/</code>。</li><li>Windows使用分号<code>;</code>作为路径分隔符，而Unix&#x2F;Linux使用冒号<code>:</code>。</li><li>Windows的根目录是<code>C:\</code>，Unix&#x2F;Linux的根目录是<code>/</code>。</li><li>Windows文本文件使用<code>\r\n</code>作为行分隔符，Unix使用<code>\n</code>，Mac使用<code>\r</code>。</li></ul><h4 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. <strong>构造函数</strong></h4><ul><li>**<code>File(String pathname)</code>**：根据文件路径创建一个 <code>File</code> 对象。</li><li>**<code>File(String parent, String child)</code>**：根据父路径和子路径创建一个 <code>File</code> 对象。</li><li>**<code>File(File parent, String child)</code>**：根据父文件和子路径创建一个 <code>File</code> 对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;path/to/file.txt&quot;</span>);<br><span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;path/to&quot;</span>, <span class="hljs-string">&quot;file.txt&quot;</span>);<br><span class="hljs-type">File</span> <span class="hljs-variable">file3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;path/to&quot;</span>), <span class="hljs-string">&quot;file.txt&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="2-文件-目录存在性检查"><a href="#2-文件-目录存在性检查" class="headerlink" title="2. 文件&#x2F;目录存在性检查"></a>2. <strong>文件&#x2F;目录存在性检查</strong></h4><ul><li>**<code>boolean exists()</code>**：检查文件或目录是否存在。</li><li>**<code>boolean isFile()</code>**：检查路径是否是一个普通文件。</li><li>**<code>boolean isDirectory()</code>**：检查路径是否是一个目录。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file.txt&quot;</span>);<br><span class="hljs-keyword">if</span> (file.exists()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;File exists.&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (file.isFile()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;It&#x27;s a file.&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;It&#x27;s a directory.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-创建文件-目录"><a href="#3-创建文件-目录" class="headerlink" title="3. 创建文件&#x2F;目录"></a>3. <strong>创建文件&#x2F;目录</strong></h4><ul><li>**<code>boolean createNewFile()</code>**：如果文件不存在，则创建一个新文件。如果文件已存在，返回 <code>false</code>。</li><li>**<code>boolean mkdir()</code>**：创建一个目录。如果目录已存在，返回 <code>false</code>。</li><li>**<code>boolean mkdirs()</code>**：创建目录及其父目录（如果父目录不存在的话）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;newfile.txt&quot;</span>);<br><span class="hljs-keyword">if</span> (file.createNewFile()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;File created successfully.&quot;</span>);<br>&#125;<br><br><span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;newdir&quot;</span>);<br><span class="hljs-keyword">if</span> (dir.mkdir()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;Directory created.&quot;</span>);<br>&#125;<br><br><span class="hljs-type">File</span> <span class="hljs-variable">nestedDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;parentdir/subdir&quot;</span>);<br><span class="hljs-keyword">if</span> (nestedDir.mkdirs()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;Directories created.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-删除文件-目录"><a href="#4-删除文件-目录" class="headerlink" title="4. 删除文件&#x2F;目录"></a>4. <strong>删除文件&#x2F;目录</strong></h4><ul><li>**<code>boolean delete()</code>**：删除文件或空目录。如果成功删除，返回 <code>true</code>；否则返回 <code>false</code>。</li><li>**<code>boolean deleteOnExit()</code>**：当 JVM 退出时，删除文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file.txt&quot;</span>);<br><span class="hljs-keyword">if</span> (file.delete()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;File deleted.&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 删除文件直到 JVM 退出时</span><br>file.deleteOnExit();<br></code></pre></td></tr></table></figure><h4 id="5-重命名文件"><a href="#5-重命名文件" class="headerlink" title="5. 重命名文件"></a>5. <strong>重命名文件</strong></h4><ul><li>**<code>boolean renameTo(File dest)</code>**：将文件或目录重命名为目标文件。如果成功重命名，返回 <code>true</code>；否则返回 <code>false</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">oldFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;oldname.txt&quot;</span>);<br><span class="hljs-type">File</span> <span class="hljs-variable">newFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;newname.txt&quot;</span>);<br><span class="hljs-keyword">if</span> (oldFile.renameTo(newFile)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;File renamed.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-获取文件信息"><a href="#6-获取文件信息" class="headerlink" title="6. 获取文件信息"></a>6. <strong>获取文件信息</strong></h4><ul><li>**<code>long length()</code>**：获取文件的长度（以字节为单位）。</li><li>**<code>String getName()</code>**：获取文件或目录的名称。</li><li>**<code>String getPath()</code>**：获取文件的路径。</li><li>**<code>String getAbsolutePath()</code>**：获取文件的绝对路径。</li><li>**<code>String getParent()</code>**：获取文件或目录的父目录路径。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file.txt&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;File name: &quot;</span> + file.getName());<br>System.out.println(<span class="hljs-string">&quot;File path: &quot;</span> + file.getPath());<br>System.out.println(<span class="hljs-string">&quot;Absolute path: &quot;</span> + file.getAbsolutePath());<br>System.out.println(<span class="hljs-string">&quot;Parent directory: &quot;</span> + file.getParent());<br>System.out.println(<span class="hljs-string">&quot;File size: &quot;</span> + file.length() + <span class="hljs-string">&quot; bytes&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="7-列出目录中的文件"><a href="#7-列出目录中的文件" class="headerlink" title="7. 列出目录中的文件"></a>7. <strong>列出目录中的文件</strong></h4><ul><li>**<code>String[] list()</code>**：返回该目录下的所有文件和子目录的名称。</li><li>**<code>File[] listFiles()</code>**：返回该目录下的所有文件和子目录的 <code>File</code> 对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;path/to/directory&quot;</span>);<br>String[] files = dir.list();<br><span class="hljs-keyword">if</span> (files != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">for</span> (String fileName : files) &#123;<br>        System.out.println(fileName);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用 listFiles() 获取 File 对象</span><br>File[] fileObjects = dir.listFiles();<br><span class="hljs-keyword">if</span> (fileObjects != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">for</span> (File file : fileObjects) &#123;<br>        System.out.println(file.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-检查文件是否可读-可写"><a href="#8-检查文件是否可读-可写" class="headerlink" title="8. 检查文件是否可读&#x2F;可写"></a>8. <strong>检查文件是否可读&#x2F;可写</strong></h4><ul><li>**<code>boolean canRead()</code>**：检查文件是否可读。</li><li>**<code>boolean canWrite()</code>**：检查文件是否可写。</li><li>**<code>boolean canExecute()</code>**：检查文件是否可执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file.txt&quot;</span>);<br><span class="hljs-keyword">if</span> (file.canRead()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;File is readable.&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (file.canWrite()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;File is writable.&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (file.canExecute()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;File is executable.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-设置文件权限"><a href="#9-设置文件权限" class="headerlink" title="9. 设置文件权限"></a>9. <strong>设置文件权限</strong></h4><ul><li>**<code>boolean setReadOnly()</code>**：将文件设置为只读。</li><li>**<code>boolean setWritable(boolean writable)</code>**：设置文件是否可写。</li><li>**<code>boolean setReadable(boolean readable)</code>**：设置文件是否可读。</li><li>**<code>boolean setExecutable(boolean executable)</code>**：设置文件是否可执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file.txt&quot;</span>);<br>file.setReadOnly();<br>file.setWritable(<span class="hljs-literal">false</span>);<br>file.setReadable(<span class="hljs-literal">true</span>);<br>file.setExecutable(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h4 id="10-获取文件的时间戳"><a href="#10-获取文件的时间戳" class="headerlink" title="10. 获取文件的时间戳"></a>10. <strong>获取文件的时间戳</strong></h4><ul><li>**<code>long lastModified()</code>**：获取文件或目录的最后修改时间，返回的是毫秒数。</li><li>**<code>boolean setLastModified(long time)</code>**：设置文件或目录的最后修改时间。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;file.txt&quot;</span>);<br><span class="hljs-type">long</span> <span class="hljs-variable">lastModifiedTime</span> <span class="hljs-operator">=</span> file.lastModified();<br>System.out.println(<span class="hljs-string">&quot;Last modified: &quot;</span> + lastModifiedTime);<br><br><span class="hljs-comment">// 设置文件的最后修改时间为当前时间</span><br>file.setLastModified(System.currentTimeMillis());<br></code></pre></td></tr></table></figure><h4 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h4><p>用于过滤，看一个文件是否应该杯列出</p><p><strong>使用</strong></p><ul><li><code>public String[] list(FilenameFilter filter)</code>：返回一个字符串数组，包含满足过滤器条件的文件的名字。</li><li><code>public File[] listFiles(FilenameFilter filter)</code>：返回一个<code>File</code>对象数组，包含满足过滤器条件的文件。</li><li><code>public File[] listFiles(FileFilter filter)</code>：同样返回一个<code>File</code>对象数组，但这里使用的是<code>FileFilter</code>接口。</li></ul><p><strong>具体例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 导入File类，用于文件和目录的操作</span><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-comment">// 导入FilenameFilter接口，用于文件过滤</span><br><span class="hljs-keyword">import</span> java.io.FilenameFilter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListDirectoryWithFilter</span> &#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;.&quot;</span>); <span class="hljs-comment">// 创建一个File对象，表示当前工作目录</span><br>        <span class="hljs-keyword">if</span> (dir.isDirectory()) &#123; <span class="hljs-comment">// 如果File对象表示的是一个目录，则执行大括号内的代码</span><br>            <span class="hljs-comment">// 使用匿名内部类实现FilenameFilter接口，创建一个过滤器</span><br>            <span class="hljs-comment">// 并使用dir对象的list方法列出所有符合条件的文件</span><br>            String[] files = dir.list(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FilenameFilter</span>() &#123;<br>                <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(File dir, String file)</span> &#123; <span class="hljs-comment">// FilenameFilter接口的抽象方法，用于定义过滤逻辑</span><br>                    <span class="hljs-keyword">return</span> file.endsWith(<span class="hljs-string">&quot;.java&quot;</span>); <span class="hljs-comment">// 过滤条件是文件名以&quot;.java&quot;结尾</span><br>                &#125;<br>            &#125;);<br><br>            <span class="hljs-comment">// 遍历files数组，打印出每个符合条件的文件名</span><br>            <span class="hljs-keyword">for</span> (String file : files) &#123;<br>                System.out.println(file);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>字节流是最基础的 I&#x2F;O 流，它以字节为单位处理数据。字节流可以处理所有类型的 I&#x2F;O 数据，包括文本和二进制数据（如图片、音频等）。</p><p>创建流的时候可以传入操作的文件的名字、路径、或者一个文件File本身</p><h4 id="常见的字节流类："><a href="#常见的字节流类：" class="headerlink" title="常见的字节流类："></a>常见的字节流类：</h4><ul><li>**<code>InputStream</code>**：字节输入流的抽象类。<ul><li>常用子类：<ul><li><code>FileInputStream</code>：从文件中读取字节数据。</li><li><code>BufferedInputStream</code>：为其他输入流提供缓冲功能，提升读取性能。</li><li><code>DataInputStream</code>：读取原始数据类型（如 <code>int</code>、<code>float</code> 等）。</li><li><code>ByteArrayInputStream</code>：从字节数组中读取数据。</li></ul></li></ul></li><li>**<code>OutputStream</code>**：字节输出流的抽象类。<ul><li>常用子类：<ul><li><code>FileOutputStream</code>：将字节数据写入文件。</li><li><code>BufferedOutputStream</code>：为其他输出流提供缓冲功能，提升写入性能。</li><li><code>DataOutputStream</code>：写入原始数据类型（如 <code>int</code>、<code>float</code> 等）。</li><li><code>ByteArrayOutputStream</code>：向字节数组中写入数据。</li></ul></li></ul></li></ul><p>类可以嵌套</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">DataInputStream a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStram</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(fileName)));<br></code></pre></td></tr></table></figure><h4 id="常用的字节流的-read-和-write-函数："><a href="#常用的字节流的-read-和-write-函数：" class="headerlink" title="常用的字节流的 read() 和 write() 函数："></a>常用的字节流的 <code>read()</code> 和 <code>write()</code> 函数：</h4><ol><li><p><strong><code>read()</code> 方法</strong>（用于读取数据）：</p><ul><li><p><code>int read()</code>：读取一个字节的数据，如果没有更多字节可读，返回 -1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">byteData</span> <span class="hljs-operator">=</span> inputStream.read();<br></code></pre></td></tr></table></figure></li><li><p><code>int read(byte[] b)</code>：将字节流读取到指定的字节数组 b 中，返回实际读取的字节数。如果流的末尾已到，返回 -1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">bytesRead</span> <span class="hljs-operator">=</span> inputStream.read(byteArray);<br></code></pre></td></tr></table></figure></li><li><p><code>int read(byte[] b, int off, int len)</code> ：从字节流中读取最多 len字节，放入字节数组 b中，从 off位置开始填充。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">bytesRead</span> <span class="hljs-operator">=</span> inputStream.read(byteArray, <span class="hljs-number">0</span>, byteArray.length);<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>write()</code> 方法</strong>（用于写入数据）：</p><ul><li><p><code>void write(int b)</code>：将一个字节数据写入输出流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">outputStream.write(byteData);<br></code></pre></td></tr></table></figure></li><li><p><code>void write(byte[] b)</code>：将整个字节数组写入输出流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">outputStream.write(byteArray);<br></code></pre></td></tr></table></figure></li><li><p><code>void write(byte[] b, int off, int len)</code>：从字节数组 b中的 off位置开始，写入 len个字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">outputStream.write(byteArray, <span class="hljs-number">0</span>, byteArray.length);<br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>字符流是对字节流的封装，以字符为单位进行处理，专门用于处理字符数据（文本）。字符流在读写数据时会自动处理字符的编码和解码，通常使用 Unicode 编码。</p><h4 id="常见的字符流类："><a href="#常见的字符流类：" class="headerlink" title="常见的字符流类："></a>常见的字符流类：</h4><ul><li>**<code>Reader</code>**：字符输入流的抽象类。<ul><li>常用子类：<ul><li><code>FileReader</code>：从文件中读取字符数据。</li><li><code>BufferedReader</code>：为其他输入流提供缓冲功能，提升读取性能。</li><li><code>CharArrayReader</code>：从字符数组中读取字符。</li><li><code>StringReader</code>：从字符串中读取字符。</li></ul></li></ul></li><li>**<code>Writer</code>**：字符输出流的抽象类。<ul><li>常用子类：<ul><li><code>FileWriter</code>：将字符数据写入文件。</li><li><code>BufferedWriter</code>：为其他输出流提供缓冲功能，提升写入性能。</li><li><code>CharArrayWriter</code>：将字符写入字符数组。</li><li><code>StringWriter</code>：将字符写入字符串。</li></ul></li></ul></li></ul><h4 id="常用的字符流的-read-和-write-函数："><a href="#常用的字符流的-read-和-write-函数：" class="headerlink" title="常用的字符流的 read() 和 write() 函数："></a>常用的字符流的 <code>read()</code> 和 <code>write()</code> 函数：</h4><ol><li><p><strong><code>read()</code> 方法</strong>（用于读取字符数据）：</p><ul><li><p><code>int read()</code>：读取一个字符（以整数形式返回）。如果流的末尾已到，返回 -1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">charData</span> <span class="hljs-operator">=</span> reader.read();<br></code></pre></td></tr></table></figure></li><li><p><code>int read(char[] cbuf)</code> ：将字符流读取到指定的字符数组 cbuf中，返回实际读取的字符数。如果流的末尾已到，返回 -1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">charsRead</span> <span class="hljs-operator">=</span> reader.read(charArray);<br></code></pre></td></tr></table></figure></li><li><p><code>int read(char[] cbuf, int off, int len)</code>：从字符流中读取最多 len个字符，并将其存储到字符数组 cbuf中，从 off位置开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">charsRead</span> <span class="hljs-operator">=</span> reader.read(charArray, <span class="hljs-number">0</span>, charArray.length);<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>write()</code> 方法</strong>（用于写入字符数据）：</p><ul><li><p><code>void write(int c)</code>：写入一个字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">writer.write(charData);<br></code></pre></td></tr></table></figure></li><li><p><code>void write(char[] cbuf)</code>：将整个字符数组 cbuf写入输出流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">writer.write(charArray);<br></code></pre></td></tr></table></figure></li><li><p><code>void write(char[] cbuf, int off, int len)</code>：从字符数组 cbuf中的 off位置开始，写入 len个字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">writer.write(charArray, <span class="hljs-number">0</span>, charArray.length);<br></code></pre></td></tr></table></figure></li></ul></li></ol><h2 id="java如何实现不同字符的转换？"><a href="#java如何实现不同字符的转换？" class="headerlink" title="java如何实现不同字符的转换？"></a>java如何实现不同字符的转换？</h2><blockquote><p>java内使用的是Unicode编码，使用字符流的时候会需要在内外部不同的字符之间进行转换</p></blockquote><p>JDK 1.4 引入了一个新的包 <code>java.nio.charset</code>，作为 NIO（New IO，新输入输出）的一部分，主要用于支持字符编码和解码。它帮助 Java 程序在内部使用 Unicode（UCS-2 编码）表示字符，同时能与外部设备进行字符转换。外部设备可能使用其他编码格式（例如：US-ASCII、ISO8859-x、UTF-8、UTF-16、UTF-16BE、UTF-16LE 等）。</p><ol><li><p><strong><code>java.nio.charset.Charset</code> 类</strong>：<br>  <code>Charset</code>类是 <code>java.nio.charset</code>包中的主要类，提供了静态方法来处理字符集（Charset）。它能够执行字符集相关的操作，例如：</p><ul><li><strong>测试某个字符集是否被支持</strong>：通过 <code>Charset</code> 类，可以测试某种字符编码格式是否被 Java 所支持。</li><li><strong>按名称查找字符集实例</strong>：可以通过字符集的名称（如 “UTF-8”, “ISO-8859-1” 等）查找相应的字符集实例。</li><li><strong>列出所有可用的字符集</strong>：Java 提供了一个方法来列出所有可用的字符集，帮助开发者选择合适的编码方式。</li></ul></li><li><p><strong>字符集与编码</strong>：</p><ul><li>在 Java 程序中，所有字符都使用 Unicode（UCS-2 编码）来表示。Unicode 是一种全球通用的字符编码标准，它可以表示世界上几乎所有的书写系统中的字符。</li><li>然而，外部设备（如文件、网络等）可能使用不同的字符编码格式，例如：<ul><li><strong>US-ASCII</strong>：一种7位字符编码，只能表示英文字符。</li><li><strong>ISO8859-x</strong>：一系列8位编码，支持多种西方语言。</li><li><strong>UTF-8</strong>：一种变长编码方式，可以表示所有 Unicode 字符，且与 ASCII 向后兼容。</li><li><strong>UTF-16</strong>：16位编码方式，支持所有 Unicode 字符，采用变长编码。</li><li><strong>UTF-16BE、UTF-16LE</strong>：UTF-16 的两种字节顺序（Big Endian 和 Little Endian）。</li></ul></li></ul></li><li><p><strong>字符集的作用</strong>：</p><ul><li><code>java.nio.charset</code> 包通过 <code>Charset</code> 类支持 Java 程序和外部设备之间的字符集转换。比如，Java 程序内部使用 Unicode 编码字符，但可能需要将这些字符转换成外部设备所能接受的编码格式进行读写操作。</li></ul></li><li><p>**<code>Charset</code>类中的常用函数 **</p><ol><li><code>public static SortedMap&lt;String,Charset&gt; availableCharsets()</code><ul><li>这个方法返回一个<code>SortedMap</code>，其中包含了所有可用的字符集及其对应的<code>Charset</code>实例。这个映射是按照字符集名称排序的。</li></ul></li><li><code>public static Charset defaultCharset()</code><ul><li>这个方法返回默认的字符集，即系统默认使用的字符集。在不同的系统和Java虚拟机中，这个默认字符集可能不同。</li></ul></li><li><code>public static Charset forName(String charsetName)</code><ul><li>这个方法接受一个字符集名称作为参数，并返回一个对应的<code>Charset</code>实例。如果指定的字符集名称不存在或不支持，会抛出<code>IllegalCharsetNameException</code>。</li></ul></li><li><code>public static boolean isSupported(String charsetName)</code><ul><li>这个方法用于检查指定的字符集名称是否被当前Java虚拟机支持。如果支持，返回<code>true</code>；否则，返回<code>false</code>。</li></ul></li></ol></li><li><p><strong><code>Charset</code>类的编码和解码方法</strong></p><ol><li><p><strong>编码</strong></p><ul><li><code>public final ByteBuffer encode(String s)</code>：将字符串中的Unicode UCS-2字符编码为使用此字符集的“字节序列”，并返回一个<code>ByteBuffer</code>。</li><li><code>public final ByteBuffer encode(CharBuffer cb)</code>：将<code>CharBuffer</code>中的Unicode UCS-2字符编码为使用此字符集的“字节序列”，并返回一个<code>ByteBuffer</code>。</li></ul></li><li><p><strong>解码</strong></p><ul><li><code>public final CharBuffer decode(ByteBuffer bb)</code>：将使用此字符集编码的<code>ByteBuffer</code>中的字节序列解码为Unicode UCS-2，并返回一个<code>CharBuffer</code>。</li></ul></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Charset</span> <span class="hljs-variable">utf8</span> <span class="hljs-operator">=</span> Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-type">Charset</span> <span class="hljs-variable">iso8859</span> <span class="hljs-operator">=</span> Charset.forName(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;你好&quot;</span>;<br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> utf8.encode(text);<br><span class="hljs-type">String</span> <span class="hljs-variable">converted</span> <span class="hljs-operator">=</span> iso8859.decode(buffer).toString();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.CharBuffer;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCharsetEncodeDecode</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义字符集名称数组，用于编码</span><br>        String[] charsetNames = &#123;<span class="hljs-string">&quot;US-ASCII&quot;</span>, <span class="hljs-string">&quot;ISO-8859-1&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>, <span class="hljs-string">&quot;UTF-16&quot;</span>, <span class="hljs-string">&quot;UTF-16BE&quot;</span>, <span class="hljs-string">&quot;UTF-16LE&quot;</span>, <span class="hljs-string">&quot;GBK&quot;</span>, <span class="hljs-string">&quot;BIG5&quot;</span>&#125;;<br><br>        <span class="hljs-comment">// 定义要编码的消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hi,您好!&quot;</span>;<br><br>        <span class="hljs-comment">// 打印 UCS-2 在 hex 代码</span><br>        System.out.printf(<span class="hljs-string">&quot;%10s: &quot;</span>, <span class="hljs-string">&quot;UCS-2&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; message.length(); ++i) &#123;<br>            System.out.printf(<span class="hljs-string">&quot;%04x &quot;</span>, (<span class="hljs-type">int</span>) message.charAt(i));<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">// 遍历字符集名称数组</span><br>        <span class="hljs-keyword">for</span> (String charsetName : charsetNames) &#123;<br>            <span class="hljs-comment">// 根据字符集名称获取 Charset 实例</span><br>            <span class="hljs-type">Charset</span> <span class="hljs-variable">charset</span> <span class="hljs-operator">=</span> Charset.forName(charsetName);<br>            System.out.printf(<span class="hljs-string">&quot;%10s: &quot;</span>, charset.name());<br><br>            <span class="hljs-comment">// 将 Unicode UCS-2 字符编码为该字符集的字节序列</span><br>            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">bb</span> <span class="hljs-operator">=</span> charset.encode(message);<br><br>            <span class="hljs-comment">// 打印字节序列的十六进制代码</span><br>            <span class="hljs-keyword">while</span> (bb.hasRemaining()) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;%02x &quot;</span>, bb.get());<br>            &#125;<br>            System.out.println();<br>            bb.rewind(); <span class="hljs-comment">// 重置 ByteBuffer，以便下次使用</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="InputStreamReader-和-OutputStreamWriter"><a href="#InputStreamReader-和-OutputStreamWriter" class="headerlink" title="InputStreamReader 和 OutputStreamWriter"></a>InputStreamReader 和 OutputStreamWriter</h2><p>在Java中，<code>InputStreamReader</code>和<code>OutputStreamWriter</code>是用于在字节流（如<code>InputStream</code>和<code>OutputStream</code>）与字符流之间转换的“桥梁”流。它们允许你在读取或写入数据时指定字符集。</p><h3 id="InputStreamReader的构造函数"><a href="#InputStreamReader的构造函数" class="headerlink" title="InputStreamReader的构造函数"></a>InputStreamReader的构造函数</h3><ol><li><p><strong>使用默认字符集</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InputStreamReader</span><span class="hljs-params">(InputStream in)</span><br></code></pre></td></tr></table></figure><p>这个构造函数使用系统默认的字符集来创建一个<code>InputStreamReader</code>对象。</p></li><li><p><strong>指定字符集名称</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InputStreamReader</span><span class="hljs-params">(InputStream in, String charsetName)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException<br></code></pre></td></tr></table></figure><p>这个构造函数允许你通过字符集名称来指定字符集。如果指定的字符集名称不支持，会抛出<code>UnsupportedEncodingException</code>。</p></li><li><p><strong>使用Charset对象</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InputStreamReader</span><span class="hljs-params">(InputStream in, Charset cs)</span><br></code></pre></td></tr></table></figure><p>这个构造函数使用<code>Charset</code>对象来指定字符集。<code>Charset</code>是一个更现代的接口，用于字符集的编码和解码。</p></li></ol><h3 id="OutputStreamWriter的构造函数"><a href="#OutputStreamWriter的构造函数" class="headerlink" title="OutputStreamWriter的构造函数"></a>OutputStreamWriter的构造函数</h3><ol><li><p><strong>使用默认字符集</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">OutputStreamWriter</span><span class="hljs-params">(OutputStream out)</span><br></code></pre></td></tr></table></figure><p>这个构造函数使用系统默认的字符集来创建一个<code>OutputStreamWriter</code>对象。</p></li><li><p><strong>指定字符集名称</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">OutputStreamWriter</span><span class="hljs-params">(OutputStream out, String charsetName)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException<br></code></pre></td></tr></table></figure><p>这个构造函数允许你通过字符集名称来指定字符集。如果指定的字符集名称不支持，会抛出<code>UnsupportedEncodingException</code>。</p></li><li><p><strong>使用Charset对象</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">OutputStreamWriter</span><span class="hljs-params">(OutputStream out, Charset cs)</span><br></code></pre></td></tr></table></figure><p>这个构造函数使用<code>Charset</code>对象来指定字符集。</p></li></ol><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p>可以用作键盘输入读取（控制台），也可以用作文件读取</p><p><strong>常用构造函数</strong></p><table><thead><tr><th>构造方法</th><th>功能描述</th></tr></thead><tbody><tr><td><code>Scanner(InputStream source)</code></td><td>从输入流中读取数据（如键盘）</td></tr><tr><td><code>Scanner(File source)</code></td><td>从文件中读取数据</td></tr><tr><td><code>Scanner(String source)</code></td><td>从字符串中读取数据</td></tr><tr><td><code>Scanner(Readable source)</code></td><td>从实现 <code>Readable</code> 的对象读取数据</td></tr><tr><td><code>Scanner(Path path)</code></td><td>从路径读取文件内容</td></tr></tbody></table><p>如果是从控制台输入数据，是用System.in</p><p><strong>常用方法</strong></p><ol><li><strong>数据读取方法</strong></li></ol><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td><code>next()</code></td><td>读取一个<strong>单词</strong>（以空白符分隔）</td></tr><tr><td><code>nextLine()</code></td><td>读取一整行</td></tr><tr><td><code>nextInt()</code></td><td>读取一个整数</td></tr><tr><td><code>nextDouble()</code></td><td>读取一个双精度浮点数</td></tr><tr><td><code>nextFloat()</code></td><td>读取一个单精度浮点数</td></tr><tr><td><code>nextBoolean()</code></td><td>读取一个布尔值（<code>true/false</code>）</td></tr><tr><td><code>hasNext()</code></td><td>检查是否还有下一个可用的输入</td></tr><tr><td><code>hasNextInt()</code></td><td>检查下一个输入是否为整数</td></tr><tr><td><code>hasNextDouble()</code></td><td>检查下一个输入是否为双精度浮点数</td></tr></tbody></table><ol start="2"><li><strong>辅助方法</strong></li></ol><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td><code>useDelimiter(String pattern)</code></td><td>设置分隔符（默认以空白符为分隔）</td></tr><tr><td><code>close()</code></td><td>关闭 <code>Scanner</code>，释放资源</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test</title>
      <link href="/my_blog/2024/12/28/test/"/>
      <url>/my_blog/2024/12/28/test/</url>
      
        <content type="html"><![CDATA[<h1 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a>正文部分</h1><p>你好！</p><h1 id="测试！aaa"><a href="#测试！aaa" class="headerlink" title="测试！aaa"></a>测试！aaa</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/my_blog/2024/12/28/hello-world/"/>
      <url>/my_blog/2024/12/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
